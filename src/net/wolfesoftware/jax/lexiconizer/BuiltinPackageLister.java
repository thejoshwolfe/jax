package net.wolfesoftware.jax.lexiconizer;

import java.util.*;
import net.wolfesoftware.jax.ast.QualifiedName;
import net.wolfesoftware.jax.util.Util;

public class BuiltinPackageLister
{
    private static final HashMap<String, String[]> packages = new HashMap<String, String[]>(1024);
    static {
        packages.put("com.sun.corba.se.PortableActivationIDL", new String[] { "Activator", "ActivatorHelper", "ActivatorHolder", "ActivatorOperations", "BadServerDefinition", "BadServerDefinitionHelper", "BadServerDefinitionHolder", "EndPointInfo", "EndPointInfoHelper", "EndPointInfoHolder", "EndpointInfoListHelper", "EndpointInfoListHolder", "IIOP_CLEAR_TEXT", "InitialNameService", "InitialNameServiceHelper", "InitialNameServiceHolder", "InitialNameServiceOperations", "InvalidORBid", "InvalidORBidHelper", "InvalidORBidHolder", "Locator", "LocatorHelper", "LocatorHolder", "LocatorOperations", "NoSuchEndPoint", "NoSuchEndPointHelper", "NoSuchEndPointHolder", "ORBAlreadyRegistered", "ORBAlreadyRegisteredHelper", "ORBAlreadyRegisteredHolder", "ORBidListHelper", "ORBidListHolder", "ORBPortInfo", "ORBPortInfoHelper", "ORBPortInfoHolder", "ORBPortInfoListHelper", "ORBPortInfoListHolder", "ORBProxy", "ORBProxyHelper", "ORBProxyHolder", "ORBProxyOperations", "Repository", "RepositoryHelper", "RepositoryHolder", "RepositoryOperations", "ServerAlreadyActive", "ServerAlreadyActiveHelper", "ServerAlreadyActiveHolder", "ServerAlreadyInstalled", "ServerAlreadyInstalledHelper", "ServerAlreadyInstalledHolder", "ServerAlreadyRegistered", "ServerAlreadyRegisteredHelper", "ServerAlreadyRegisteredHolder", "ServerAlreadyUninstalled", "ServerAlreadyUninstalledHelper", "ServerAlreadyUninstalledHolder", "ServerHeldDown", "ServerHeldDownHelper", "ServerHeldDownHolder", "ServerIdsHelper", "ServerIdsHolder", "ServerManager", "ServerManagerHelper", "ServerManagerHolder", "ServerManagerOperations", "ServerNotActive", "ServerNotActiveHelper", "ServerNotActiveHolder", "ServerNotRegistered", "ServerNotRegisteredHelper", "ServerNotRegisteredHolder", "ServerProxy", "ServerProxyHelper", "ServerProxyHolder", "ServerProxyOperations", "TCPPortHelper", "_ActivatorImplBase", "_ActivatorStub", "_InitialNameServiceImplBase", "_InitialNameServiceStub", "_LocatorImplBase", "_LocatorStub", "_ORBProxyImplBase", "_ORBProxyStub", "_RepositoryImplBase", "_RepositoryStub", "_ServerManagerImplBase", "_ServerManagerStub", "_ServerProxyImplBase", "_ServerProxyStub" });
        packages.put("com.sun.corba.se.PortableActivationIDL.InitialNameServicePackage", new String[] { "NameAlreadyBound", "NameAlreadyBoundHelper", "NameAlreadyBoundHolder" });
        packages.put("com.sun.corba.se.PortableActivationIDL.LocatorPackage", new String[] { "ServerLocationPerORB", "ServerLocationPerORBHelper", "ServerLocationPerORBHolder", "ServerLocationPerType", "ServerLocationPerTypeHelper", "ServerLocationPerTypeHolder" });
        packages.put("com.sun.corba.se.PortableActivationIDL.RepositoryPackage", new String[] { "AppNamesHelper", "AppNamesHolder", "ServerDef", "ServerDefHelper", "ServerDefHolder" });
        packages.put("com.sun.corba.se.impl.activation", new String[] { "CommandHandler", "NameServiceStartThread", "ORBD", "ProcessMonitorThread", "RepositoryImpl", "ServerMain", "ServerManagerImpl", "ServerTableEntry", "ServerTool" });
        packages.put("com.sun.corba.se.impl.copyobject", new String[] { "CopierManagerImpl", "FallbackObjectCopierImpl", "JavaStreamObjectCopierImpl", "ORBStreamObjectCopierImpl", "ReferenceObjectCopierImpl" });
        packages.put("com.sun.corba.se.impl.corba", new String[] { "AnyImpl", "AnyImplHelper", "AsynchInvoke", "ContextImpl", "ContextListImpl", "CORBAObjectImpl", "EnvironmentImpl", "ExceptionListImpl", "NamedValueImpl", "NVListImpl", "PrincipalImpl", "RequestImpl", "ServerRequestImpl", "TCUtility", "TypeCodeFactory", "TypeCodeImpl", "TypeCodeImplHelper" });
        packages.put("com.sun.corba.se.impl.dynamicany", new String[] { "DynAnyBasicImpl", "DynAnyFactoryImpl", "DynAnyUtil", "DynArrayImpl", "DynEnumImpl", "DynFixedImpl", "DynSequenceImpl", "DynStructImpl", "DynUnionImpl", "DynValueBoxImpl", "DynValueImpl" });
        packages.put("com.sun.corba.se.impl.encoding", new String[] { "BufferManagerFactory", "BufferManagerRead", "BufferManagerReadGrow", "BufferManagerReadStream", "BufferManagerWrite", "BufferManagerWriteCollect", "BufferManagerWriteGrow", "BufferManagerWriteStream", "BufferQueue", "ByteBufferWithInfo", "CachedCodeBase", "CDRInputObject", "CDRInputStream", "CDRInputStream_1_0", "CDRInputStream_1_1", "CDRInputStream_1_2", "CDROutputObject", "CDROutputStream", "CDROutputStream_1_0", "CDROutputStream_1_1", "CDROutputStream_1_2", "CodeSetComponentInfo", "CodeSetConversion", "EncapsInputStream", "EncapsOutputStream", "IDLJavaSerializationInputStream", "IDLJavaSerializationOutputStream", "MarshalInputStream", "MarshalOutputStream", "OSFCodeSetRegistry", "TypeCodeInputStream", "TypeCodeOutputStream", "TypeCodeReader", "WrapperInputStream" });
        packages.put("com.sun.corba.se.impl.interceptors", new String[] { "CDREncapsCodec", "ClientRequestInfoImpl", "CodecFactoryImpl", "InterceptorInvoker", "InterceptorList", "IORInfoImpl", "ORBInitInfoImpl", "PICurrent", "PIHandlerImpl", "PINoOpHandlerImpl", "RequestInfoImpl", "ServerRequestInfoImpl", "SlotTable", "SlotTableStack" });
        packages.put("com.sun.corba.se.impl.io", new String[] { "FVDCodeBaseImpl", "IIOPInputStream", "IIOPOutputStream", "InputStreamHook", "ObjectStreamClass", "ObjectStreamField", "OptionalDataException", "OutputStreamHook", "TypeMismatchException", "ValueHandlerImpl", "ValueUtility" });
        packages.put("com.sun.corba.se.impl.ior", new String[] { "ByteBuffer", "EncapsulationUtility", "FreezableList", "GenericIdentifiable", "GenericTaggedComponent", "GenericTaggedProfile", "IdentifiableFactoryFinderBase", "IORImpl", "IORTemplateImpl", "IORTemplateListImpl", "JIDLObjectKeyTemplate", "NewObjectKeyTemplateBase", "ObjectAdapterIdArray", "ObjectAdapterIdNumber", "ObjectIdImpl", "ObjectKeyImpl", "ObjectKeyTemplateBase", "ObjectReferenceFactoryImpl", "ObjectReferenceProducerBase", "ObjectReferenceTemplateImpl", "OldJIDLObjectKeyTemplate", "OldObjectKeyTemplateBase", "OldPOAObjectKeyTemplate", "POAObjectKeyTemplate", "StubIORImpl", "TaggedComponentFactoryFinderImpl", "TaggedProfileFactoryFinderImpl", "TaggedProfileTemplateFactoryFinderImpl", "WireObjectKeyTemplate" });
        packages.put("com.sun.corba.se.impl.ior.iiop", new String[] { "AlternateIIOPAddressComponentImpl", "CodeSetsComponentImpl", "IIOPAddressClosureImpl", "IIOPAddressImpl", "IIOPProfileImpl", "IIOPProfileTemplateImpl", "JavaCodebaseComponentImpl", "JavaSerializationComponent", "MaxStreamFormatVersionComponentImpl", "ORBTypeComponentImpl", "RequestPartitioningComponentImpl" });
        packages.put("com.sun.corba.se.impl.javax.rmi", new String[] { "PortableRemoteObject" });
        packages.put("com.sun.corba.se.impl.javax.rmi.CORBA", new String[] { "StubDelegateImpl", "Util" });
        packages.put("com.sun.corba.se.impl.legacy.connection", new String[] { "DefaultSocketFactory", "EndPointInfoImpl", "LegacyServerSocketManagerImpl", "SocketFactoryAcceptorImpl", "SocketFactoryConnectionImpl", "SocketFactoryContactInfoImpl", "SocketFactoryContactInfoListImpl", "SocketFactoryContactInfoListIteratorImpl", "USLPort" });
        packages.put("com.sun.corba.se.impl.logging", new String[] { "ActivationSystemException", "InterceptorsSystemException", "IORSystemException", "NamingSystemException", "OMGSystemException", "ORBUtilSystemException", "POASystemException", "UtilSystemException" });
        packages.put("com.sun.corba.se.impl.monitoring", new String[] { "MonitoredAttributeInfoFactoryImpl", "MonitoredAttributeInfoImpl", "MonitoredObjectFactoryImpl", "MonitoredObjectImpl", "MonitoringManagerFactoryImpl", "MonitoringManagerImpl" });
        packages.put("com.sun.corba.se.impl.naming.cosnaming", new String[] { "BindingIteratorImpl", "InternalBindingKey", "InternalBindingValue", "InterOperableNamingImpl", "NamingContextDataStore", "NamingContextImpl", "NamingUtils", "TransientBindingIterator", "TransientNameServer", "TransientNameService", "TransientNamingContext" });
        packages.put("com.sun.corba.se.impl.naming.namingutil", new String[] { "CorbalocURL", "CorbanameURL", "IIOPEndpointInfo", "INSURL", "INSURLBase", "INSURLHandler", "NamingConstants" });
        packages.put("com.sun.corba.se.impl.naming.pcosnaming", new String[] { "InternalBindingKey", "InternalBindingValue", "NameServer", "NameService", "NamingContextImpl", "PersistentBindingIterator", "ServantManagerImpl" });
        packages.put("com.sun.corba.se.impl.oa", new String[] { "NullServantImpl" });
        packages.put("com.sun.corba.se.impl.oa.poa", new String[] { "ActiveObjectMap", "AOMEntry", "BadServerIdHandler", "DelegateImpl", "POACurrent", "POAFactory", "POAImpl", "POAManagerImpl", "POAPolicyMediator", "POAPolicyMediatorBase", "POAPolicyMediatorBase_R", "POAPolicyMediatorImpl_NR_UDS", "POAPolicyMediatorImpl_NR_USM", "POAPolicyMediatorImpl_R_AOM", "POAPolicyMediatorImpl_R_UDS", "POAPolicyMediatorImpl_R_USM", "Policies", "RequestProcessingPolicyImpl" });
        packages.put("com.sun.corba.se.impl.oa.toa", new String[] { "TOA", "TOAFactory", "TOAImpl", "TransientObjectManager" });
        packages.put("com.sun.corba.se.impl.orb", new String[] { "AppletDataCollector", "DataCollectorBase", "DataCollectorFactory", "NormalDataCollector", "NormalParserAction", "NormalParserData", "ORBConfiguratorImpl", "ORBDataParserImpl", "ORBImpl", "ORBSingleton", "ORBVersionImpl", "ParserAction", "ParserActionBase", "ParserActionFactory", "ParserDataBase", "ParserTable", "PrefixParserAction", "PrefixParserData", "PropertyOnlyDataCollector" });
        packages.put("com.sun.corba.se.impl.orbutil", new String[] { "CacheTable", "CorbaResourceUtil", "DenseIntMapImpl", "GetPropertyAction", "HexOutputStream", "IIOPInputStream_1_3", "IIOPInputStream_1_3_1", "IIOPOutputStream_1_3", "IIOPOutputStream_1_3_1", "LogKeywords", "ObjectStreamClassUtil_1_3", "ObjectStreamClass_1_3_1", "ObjectUtility", "ObjectWriter", "ORBClassLoader", "ORBConstants", "ORBUtility", "RepIdDelegator", "RepIdDelegator_1_3", "RepIdDelegator_1_3_1", "RepositoryIdFactory", "RepositoryIdInterface", "RepositoryIdStrings", "RepositoryIdUtility", "RepositoryId_1_3", "RepositoryId_1_3_1", "StackImpl", "ValueHandlerImpl_1_3", "ValueHandlerImpl_1_3_1" });
        packages.put("com.sun.corba.se.impl.orbutil.closure", new String[] { "Constant", "Future" });
        packages.put("com.sun.corba.se.impl.orbutil.concurrent", new String[] { "CondVar", "DebugMutex", "Mutex", "ReentrantMutex", "Sync", "SyncUtil" });
        packages.put("com.sun.corba.se.impl.orbutil.fsm", new String[] { "GuardedAction", "NameBase", "StateEngineImpl" });
        packages.put("com.sun.corba.se.impl.orbutil.graph", new String[] { "Graph", "GraphImpl", "Node", "NodeData" });
        packages.put("com.sun.corba.se.impl.orbutil.threadpool", new String[] { "ThreadPoolImpl", "ThreadPoolManagerImpl", "TimeoutException", "WorkQueueImpl" });
        packages.put("com.sun.corba.se.impl.presentation.rmi", new String[] { "DynamicAccessPermission", "DynamicMethodMarshallerImpl", "DynamicStubImpl", "ExceptionHandler", "ExceptionHandlerImpl", "IDLNameTranslatorImpl", "IDLType", "IDLTypeException", "IDLTypesUtil", "InvocationHandlerFactoryImpl", "JNDIStateFactoryImpl", "PresentationManagerImpl", "ReflectiveTie", "StubConnectImpl", "StubFactoryBase", "StubFactoryDynamicBase", "StubFactoryFactoryBase", "StubFactoryFactoryDynamicBase", "StubFactoryFactoryProxyImpl", "StubFactoryFactoryStaticImpl", "StubFactoryProxyImpl", "StubFactoryStaticImpl", "StubInvocationHandlerImpl" });
        packages.put("com.sun.corba.se.impl.protocol", new String[] { "AddressingDispositionException", "BootstrapServerRequestDispatcher", "CorbaClientDelegateImpl", "CorbaClientRequestDispatcherImpl", "CorbaInvocationInfo", "CorbaMessageMediatorImpl", "CorbaServerRequestDispatcherImpl", "FullServantCacheLocalCRDImpl", "InfoOnlyServantCacheLocalCRDImpl", "INSServerRequestDispatcher", "JIDLLocalCRDImpl", "LocalClientRequestDispatcherBase", "MinimalServantCacheLocalCRDImpl", "NotLocalLocalCRDImpl", "POALocalCRDImpl", "RequestCanceledException", "RequestDispatcherRegistryImpl", "ServantCacheLocalCRDBase", "SharedCDRClientRequestDispatcherImpl", "SpecialMethod" });
        packages.put("com.sun.corba.se.impl.protocol.giopmsgheaders", new String[] { "AddressingDispositionHelper", "CancelRequestMessage", "CancelRequestMessage_1_0", "CancelRequestMessage_1_1", "CancelRequestMessage_1_2", "FragmentMessage", "FragmentMessage_1_1", "FragmentMessage_1_2", "IORAddressingInfo", "IORAddressingInfoHelper", "KeyAddr", "LocateReplyMessage", "LocateReplyMessage_1_0", "LocateReplyMessage_1_1", "LocateReplyMessage_1_2", "LocateReplyOrReplyMessage", "LocateRequestMessage", "LocateRequestMessage_1_0", "LocateRequestMessage_1_1", "LocateRequestMessage_1_2", "Message", "MessageBase", "MessageHandler", "Message_1_0", "Message_1_1", "Message_1_2", "ProfileAddr", "ReferenceAddr", "ReplyMessage", "ReplyMessage_1_0", "ReplyMessage_1_1", "ReplyMessage_1_2", "RequestMessage", "RequestMessage_1_0", "RequestMessage_1_1", "RequestMessage_1_2", "TargetAddress", "TargetAddressHelper" });
        packages.put("com.sun.corba.se.impl.resolver", new String[] { "BootstrapResolverImpl", "CompositeResolverImpl", "FileResolverImpl", "INSURLOperationImpl", "LocalResolverImpl", "ORBDefaultInitRefResolverImpl", "ORBInitRefResolverImpl", "SplitLocalResolverImpl" });
        packages.put("com.sun.corba.se.impl.transport", new String[] { "ByteBufferPoolImpl", "CorbaConnectionCacheBase", "CorbaContactInfoBase", "CorbaContactInfoListImpl", "CorbaContactInfoListIteratorImpl", "CorbaInboundConnectionCacheImpl", "CorbaOutboundConnectionCacheImpl", "CorbaResponseWaitingRoomImpl", "CorbaTransportManagerImpl", "DefaultIORToSocketInfoImpl", "DefaultSocketFactoryImpl", "EventHandlerBase", "ListenerThreadImpl", "ReaderThreadImpl", "ReadTCPTimeoutsImpl", "SelectorImpl", "SharedCDRContactInfoImpl", "SocketOrChannelAcceptorImpl", "SocketOrChannelConnectionImpl", "SocketOrChannelContactInfoImpl" });
        packages.put("com.sun.corba.se.impl.util", new String[] { "JDKBridge", "ORBProperties", "PackagePrefixChecker", "RepositoryId", "SUNVMCID", "Utility", "Version" });
        packages.put("com.sun.corba.se.internal.CosNaming", new String[] { "BootstrapServer" });
        packages.put("com.sun.corba.se.internal.Interceptors", new String[] { "PIORB" });
        packages.put("com.sun.corba.se.internal.POA", new String[] { "POAORB" });
        packages.put("com.sun.corba.se.internal.corba", new String[] { "ORBSingleton" });
        packages.put("com.sun.corba.se.internal.iiop", new String[] { "ORB" });
        packages.put("com.sun.corba.se.internal.io", new String[] { "IIOPInputStream", "IIOPOutputStream", "LibraryManager", "ObjectStreamClass" });
        packages.put("com.sun.corba.se.org.omg.CORBA", new String[] { "ORB" });
        packages.put("com.sun.corba.se.pept.broker", new String[] { "Broker" });
        packages.put("com.sun.corba.se.pept.encoding", new String[] { "InputObject", "OutputObject" });
        packages.put("com.sun.corba.se.pept.protocol", new String[] { "ClientDelegate", "ClientInvocationInfo", "ClientRequestDispatcher", "MessageMediator", "ProtocolHandler", "ServerRequestDispatcher" });
        packages.put("com.sun.corba.se.pept.transport", new String[] { "Acceptor", "ByteBufferPool", "Connection", "ConnectionCache", "ContactInfo", "ContactInfoList", "ContactInfoListIterator", "EventHandler", "InboundConnectionCache", "ListenerThread", "OutboundConnectionCache", "ReaderThread", "ResponseWaitingRoom", "Selector", "TransportManager" });
        packages.put("com.sun.corba.se.spi.activation", new String[] { "Activator", "ActivatorHelper", "ActivatorHolder", "ActivatorOperations", "BadServerDefinition", "BadServerDefinitionHelper", "BadServerDefinitionHolder", "EndPointInfo", "EndPointInfoHelper", "EndPointInfoHolder", "EndpointInfoListHelper", "EndpointInfoListHolder", "IIOP_CLEAR_TEXT", "InitialNameService", "InitialNameServiceHelper", "InitialNameServiceHolder", "InitialNameServiceOperations", "InvalidORBid", "InvalidORBidHelper", "InvalidORBidHolder", "Locator", "LocatorHelper", "LocatorHolder", "LocatorOperations", "NoSuchEndPoint", "NoSuchEndPointHelper", "NoSuchEndPointHolder", "ORBAlreadyRegistered", "ORBAlreadyRegisteredHelper", "ORBAlreadyRegisteredHolder", "ORBidHelper", "ORBidListHelper", "ORBidListHolder", "ORBPortInfo", "ORBPortInfoHelper", "ORBPortInfoHolder", "ORBPortInfoListHelper", "ORBPortInfoListHolder", "POANameHelper", "POANameHolder", "Repository", "RepositoryHelper", "RepositoryHolder", "RepositoryOperations", "Server", "ServerAlreadyActive", "ServerAlreadyActiveHelper", "ServerAlreadyActiveHolder", "ServerAlreadyInstalled", "ServerAlreadyInstalledHelper", "ServerAlreadyInstalledHolder", "ServerAlreadyRegistered", "ServerAlreadyRegisteredHelper", "ServerAlreadyRegisteredHolder", "ServerAlreadyUninstalled", "ServerAlreadyUninstalledHelper", "ServerAlreadyUninstalledHolder", "ServerHeldDown", "ServerHeldDownHelper", "ServerHeldDownHolder", "ServerHelper", "ServerHolder", "ServerIdHelper", "ServerIdsHelper", "ServerIdsHolder", "ServerManager", "ServerManagerHelper", "ServerManagerHolder", "ServerManagerOperations", "ServerNotActive", "ServerNotActiveHelper", "ServerNotActiveHolder", "ServerNotRegistered", "ServerNotRegisteredHelper", "ServerNotRegisteredHolder", "ServerOperations", "TCPPortHelper", "_ActivatorImplBase", "_ActivatorStub", "_InitialNameServiceImplBase", "_InitialNameServiceStub", "_LocatorImplBase", "_LocatorStub", "_RepositoryImplBase", "_RepositoryStub", "_ServerImplBase", "_ServerManagerImplBase", "_ServerManagerStub", "_ServerStub" });
        packages.put("com.sun.corba.se.spi.activation.InitialNameServicePackage", new String[] { "NameAlreadyBound", "NameAlreadyBoundHelper", "NameAlreadyBoundHolder" });
        packages.put("com.sun.corba.se.spi.activation.LocatorPackage", new String[] { "ServerLocation", "ServerLocationHelper", "ServerLocationHolder", "ServerLocationPerORB", "ServerLocationPerORBHelper", "ServerLocationPerORBHolder" });
        packages.put("com.sun.corba.se.spi.activation.RepositoryPackage", new String[] { "ServerDef", "ServerDefHelper", "ServerDefHolder", "StringSeqHelper", "StringSeqHolder" });
        packages.put("com.sun.corba.se.spi.copyobject", new String[] { "CopierManager", "CopyobjectDefaults", "ObjectCopier", "ObjectCopierFactory", "ReflectiveCopyException" });
        packages.put("com.sun.corba.se.spi.encoding", new String[] { "CorbaInputObject", "CorbaOutputObject" });
        packages.put("com.sun.corba.se.spi.extension", new String[] { "CopyObjectPolicy", "RequestPartitioningPolicy", "ServantCachingPolicy", "ZeroPortPolicy" });
        packages.put("com.sun.corba.se.spi.ior", new String[] { "EncapsulationFactoryBase", "Identifiable", "IdentifiableBase", "IdentifiableContainerBase", "IdentifiableFactory", "IdentifiableFactoryFinder", "IOR", "IORFactories", "IORFactory", "IORTemplate", "IORTemplateList", "MakeImmutable", "ObjectAdapterId", "ObjectId", "ObjectKey", "ObjectKeyFactory", "ObjectKeyTemplate", "TaggedComponent", "TaggedComponentBase", "TaggedComponentFactoryFinder", "TaggedProfile", "TaggedProfileTemplate", "TaggedProfileTemplateBase", "Writeable", "WriteContents" });
        packages.put("com.sun.corba.se.spi.ior.iiop", new String[] { "AlternateIIOPAddressComponent", "CodeSetsComponent", "GIOPVersion", "IIOPAddress", "IIOPFactories", "IIOPProfile", "IIOPProfileTemplate", "JavaCodebaseComponent", "MaxStreamFormatVersionComponent", "ORBTypeComponent", "RequestPartitioningComponent" });
        packages.put("com.sun.corba.se.spi.legacy.connection", new String[] { "Connection", "GetEndPointInfoAgainException", "LegacyServerSocketEndPointInfo", "LegacyServerSocketManager", "ORBSocketFactory" });
        packages.put("com.sun.corba.se.spi.legacy.interceptor", new String[] { "IORInfoExt", "ORBInitInfoExt", "RequestInfoExt", "UnknownType" });
        packages.put("com.sun.corba.se.spi.logging", new String[] { "CORBALogDomains", "LogWrapperBase", "LogWrapperFactory" });
        packages.put("com.sun.corba.se.spi.monitoring", new String[] { "LongMonitoredAttributeBase", "MonitoredAttribute", "MonitoredAttributeBase", "MonitoredAttributeInfo", "MonitoredAttributeInfoFactory", "MonitoredObject", "MonitoredObjectFactory", "MonitoringConstants", "MonitoringFactories", "MonitoringManager", "MonitoringManagerFactory", "StatisticMonitoredAttribute", "StatisticsAccumulator", "StringMonitoredAttributeBase" });
        packages.put("com.sun.corba.se.spi.oa", new String[] { "NullServant", "OADefault", "OADestroyed", "OAInvocationInfo", "ObjectAdapter", "ObjectAdapterBase", "ObjectAdapterFactory" });
        packages.put("com.sun.corba.se.spi.orb", new String[] { "DataCollector", "Operation", "OperationFactory", "ORB", "ORBConfigurator", "ORBData", "ORBVersion", "ORBVersionFactory", "ParserData", "ParserDataFactory", "ParserImplBase", "ParserImplTableBase", "PropertyParser", "StringPair" });
        packages.put("com.sun.corba.se.spi.orbutil.closure", new String[] { "Closure", "ClosureFactory" });
        packages.put("com.sun.corba.se.spi.orbutil.fsm", new String[] { "Action", "ActionBase", "FSM", "FSMImpl", "Guard", "GuardBase", "Input", "InputImpl", "State", "StateEngine", "StateEngineFactory", "StateImpl" });
        packages.put("com.sun.corba.se.spi.orbutil.proxy", new String[] { "CompositeInvocationHandler", "CompositeInvocationHandlerImpl", "DelegateInvocationHandlerImpl", "InvocationHandlerFactory", "LinkedInvocationHandler" });
        packages.put("com.sun.corba.se.spi.orbutil.threadpool", new String[] { "NoSuchThreadPoolException", "NoSuchWorkQueueException", "ThreadPool", "ThreadPoolChooser", "ThreadPoolManager", "Work", "WorkQueue" });
        packages.put("com.sun.corba.se.spi.presentation.rmi", new String[] { "DynamicMethodMarshaller", "DynamicStub", "IDLNameTranslator", "PresentationDefaults", "PresentationManager", "StubAdapter", "StubWrapper" });
        packages.put("com.sun.corba.se.spi.protocol", new String[] { "ClientDelegateFactory", "CorbaClientDelegate", "CorbaMessageMediator", "CorbaProtocolHandler", "CorbaServerRequestDispatcher", "ForwardException", "InitialServerRequestDispatcher", "LocalClientRequestDispatcher", "LocalClientRequestDispatcherFactory", "PIHandler", "RequestDispatcherDefault", "RequestDispatcherRegistry" });
        packages.put("com.sun.corba.se.spi.resolver", new String[] { "LocalResolver", "Resolver", "ResolverDefault" });
        packages.put("com.sun.corba.se.spi.servicecontext", new String[] { "CodeSetServiceContext", "MaxStreamFormatVersionServiceContext", "ORBVersionServiceContext", "SendingContextServiceContext", "ServiceContext", "ServiceContextData", "ServiceContextRegistry", "ServiceContexts", "UEInfoServiceContext", "UnknownServiceContext" });
        packages.put("com.sun.corba.se.spi.transport", new String[] { "CorbaAcceptor", "CorbaConnection", "CorbaConnectionCache", "CorbaContactInfo", "CorbaContactInfoList", "CorbaContactInfoListFactory", "CorbaContactInfoListIterator", "CorbaResponseWaitingRoom", "CorbaTransportManager", "IIOPPrimaryToContactInfo", "IORToSocketInfo", "IORTransformer", "ORBSocketFactory", "ReadTimeouts", "ReadTimeoutsFactory", "SocketInfo", "SocketOrChannelAcceptor", "TransportDefault" });
        packages.put("com.sun.image.codec.jpeg", new String[] { "ImageFormatException", "JPEGCodec", "JPEGDecodeParam", "JPEGEncodeParam", "JPEGHuffmanTable", "JPEGImageDecoder", "JPEGImageEncoder", "JPEGQTable", "TruncatedFileException" });
        packages.put("com.sun.imageio.metadata", new String[] { "XmlChars", "XmlNames" });
        packages.put("com.sun.imageio.plugins.bmp", new String[] { "BMPConstants", "BMPImageReader", "BMPImageReaderSpi", "BMPImageWriter", "BMPImageWriterSpi", "BMPMetadata", "BMPMetadataFormat", "BMPMetadataFormatResources" });
        packages.put("com.sun.imageio.plugins.common", new String[] { "BitFile", "BogusColorSpace", "I18N", "I18NImpl", "ImageUtil", "InputStreamAdapter", "LZWCompressor", "LZWStringTable", "PaletteBuilder", "ReaderUtil", "StandardMetadataFormat", "StandardMetadataFormatResources", "SubImageInputStream" });
        packages.put("com.sun.imageio.plugins.gif", new String[] { "GIFImageMetadata", "GIFImageMetadataFormat", "GIFImageMetadataFormatResources", "GIFImageReader", "GIFImageReaderSpi", "GIFImageWriter", "GIFImageWriterSpi", "GIFStreamMetadata", "GIFStreamMetadataFormat", "GIFStreamMetadataFormatResources" });
        packages.put("com.sun.imageio.plugins.jpeg", new String[] { "JPEG", "JPEGImageMetadataFormat", "JPEGImageMetadataFormatResources", "JPEGImageReader", "JPEGImageReaderResources", "JPEGImageReaderSpi", "JPEGImageWriter", "JPEGImageWriterResources", "JPEGImageWriterSpi", "JPEGMetadata", "JPEGStreamMetadataFormat", "JPEGStreamMetadataFormatResources" });
        packages.put("com.sun.imageio.plugins.png", new String[] { "PNGImageReaderSpi", "PNGImageWriterSpi", "PNGMetadata", "PNGMetadataFormat", "PNGMetadataFormatResources", "RowFilter" });
        packages.put("com.sun.imageio.plugins.wbmp", new String[] { "WBMPImageReader", "WBMPImageReaderSpi", "WBMPImageWriter", "WBMPImageWriterSpi", "WBMPMetadata", "WBMPMetadataFormat" });
        packages.put("com.sun.imageio.spi", new String[] { "FileImageInputStreamSpi", "FileImageOutputStreamSpi", "InputStreamImageInputStreamSpi", "OutputStreamImageOutputStreamSpi", "RAFImageInputStreamSpi", "RAFImageOutputStreamSpi" });
        packages.put("com.sun.imageio.stream", new String[] { "CloseableDisposerRecord", "StreamCloser", "StreamFinalizer" });
        packages.put("com.sun.java.swing", new String[] { "Painter", "SwingUtilities3" });
        packages.put("com.sun.java.swing.plaf.gtk", new String[] { "GTKColorType", "GTKConstants", "GTKDefaultEngine", "GTKEngine", "GTKLookAndFeel", "GTKNativeEngine" });
        packages.put("com.sun.java.swing.plaf.gtk.resources", new String[] { "gtk", "gtk_de", "gtk_es", "gtk_fr", "gtk_it", "gtk_ja", "gtk_ko", "gtk_sv", "gtk_zh_CN", "gtk_zh_HK", "gtk_zh_TW" });
        packages.put("com.sun.java.swing.plaf.motif", new String[] { "MotifBorders", "MotifButtonListener", "MotifButtonUI", "MotifCheckBoxMenuItemUI", "MotifCheckBoxUI", "MotifComboBoxUI", "MotifDesktopIconUI", "MotifDesktopPaneUI", "MotifEditorPaneUI", "MotifFileChooserUI", "MotifGraphicsUtils", "MotifIconFactory", "MotifInternalFrameTitlePane", "MotifInternalFrameUI", "MotifLabelUI", "MotifLookAndFeel", "MotifMenuBarUI", "MotifMenuItemUI", "MotifMenuUI", "MotifOptionPaneUI", "MotifPasswordFieldUI", "MotifPopupMenuSeparatorUI", "MotifPopupMenuUI", "MotifProgressBarUI", "MotifRadioButtonMenuItemUI", "MotifRadioButtonUI", "MotifScrollBarButton", "MotifScrollBarUI", "MotifScrollPaneUI", "MotifSeparatorUI", "MotifSliderUI", "MotifSplitPaneDivider", "MotifSplitPaneUI", "MotifTabbedPaneUI", "MotifTextAreaUI", "MotifTextFieldUI", "MotifTextPaneUI", "MotifTextUI", "MotifToggleButtonUI", "MotifTreeCellRenderer", "MotifTreeUI" });
        packages.put("com.sun.java.swing.plaf.motif.resources", new String[] { "motif", "motif_de", "motif_es", "motif_fr", "motif_it", "motif_ja", "motif_ko", "motif_sv", "motif_zh_CN", "motif_zh_HK", "motif_zh_TW" });
        packages.put("com.sun.java.swing.plaf.nimbus", new String[] { "AbstractRegionPainter", "ArrowButtonPainter", "ButtonPainter", "CheckBoxMenuItemPainter", "CheckBoxPainter", "ComboBoxComboBoxArrowButtonPainter", "ComboBoxComboBoxTextFieldPainter", "ComboBoxPainter", "DesktopIconPainter", "DesktopPanePainter", "EditorPanePainter", "FileChooserPainter", "FormattedTextFieldPainter", "InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneCloseButtonPainter", "InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneIconifyButtonPainter", "InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonPainter", "InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMenuButtonPainter", "InternalFrameInternalFrameTitlePanePainter", "InternalFramePainter", "LoweredBorder", "MenuBarMenuPainter", "MenuBarPainter", "MenuItemPainter", "MenuPainter", "NimbusLookAndFeel", "NimbusStyle", "OptionPaneOptionPaneMessageAreaOptionPaneLabelPainter", "OptionPaneOptionPaneMessageAreaPainter", "OptionPanePainter", "PasswordFieldPainter", "PopupMenuPainter", "PopupMenuSeparatorPainter", "ProgressBarPainter", "RadioButtonMenuItemPainter", "RadioButtonPainter", "ScrollBarPainter", "ScrollBarScrollBarButtonPainter", "ScrollBarScrollBarThumbPainter", "ScrollBarScrollBarTrackPainter", "ScrollPanePainter", "SeparatorPainter", "SliderPainter", "SliderSliderThumbPainter", "SliderSliderTrackPainter", "SpinnerPainter", "SpinnerPanelSpinnerFormattedTextFieldPainter", "SpinnerSpinnerNextButtonPainter", "SpinnerSpinnerPreviousButtonPainter", "SplitPanePainter", "SplitPaneSplitPaneDividerPainter", "State", "TabbedPanePainter", "TabbedPaneTabbedPaneTabAreaPainter", "TabbedPaneTabbedPaneTabPainter", "TableEditorPainter", "TableHeaderPainter", "TableHeaderTableHeaderRendererPainter", "TableScrollPaneCorner", "TextAreaPainter", "TextFieldPainter", "TextPanePainter", "ToggleButtonPainter", "ToolBarButtonPainter", "ToolBarPainter", "ToolBarToggleButtonPainter", "ToolTipPainter", "TreeCellEditorPainter", "TreePainter", "TreeTreeCellPainter" });
        packages.put("com.sun.java.swing.plaf.windows", new String[] { "DesktopProperty", "WindowsBorders", "WindowsButtonListener", "WindowsButtonUI", "WindowsCheckBoxMenuItemUI", "WindowsCheckBoxUI", "WindowsClassicLookAndFeel", "WindowsComboBoxUI", "WindowsDesktopIconUI", "WindowsDesktopManager", "WindowsDesktopPaneUI", "WindowsEditorPaneUI", "WindowsFileChooserUI", "WindowsGraphicsUtils", "WindowsIconFactory", "WindowsInternalFrameTitlePane", "WindowsInternalFrameUI", "WindowsLabelUI", "WindowsLookAndFeel", "WindowsMenuBarUI", "WindowsMenuItemUI", "WindowsMenuUI", "WindowsOptionPaneUI", "WindowsPasswordFieldUI", "WindowsPopupMenuSeparatorUI", "WindowsPopupMenuUI", "WindowsProgressBarUI", "WindowsRadioButtonMenuItemUI", "WindowsRadioButtonUI", "WindowsRootPaneUI", "WindowsScrollBarUI", "WindowsScrollPaneUI", "WindowsSeparatorUI", "WindowsSliderUI", "WindowsSpinnerUI", "WindowsSplitPaneDivider", "WindowsSplitPaneUI", "WindowsTabbedPaneUI", "WindowsTableHeaderUI", "WindowsTextAreaUI", "WindowsTextFieldUI", "WindowsTextPaneUI", "WindowsTextUI", "WindowsToggleButtonUI", "WindowsToolBarSeparatorUI", "WindowsToolBarUI", "WindowsTreeUI" });
        packages.put("com.sun.java.swing.plaf.windows.resources", new String[] { "windows", "windows_de", "windows_es", "windows_fr", "windows_it", "windows_ja", "windows_ko", "windows_sv", "windows_zh_CN", "windows_zh_HK", "windows_zh_TW" });
        packages.put("com.sun.java_cup.internal.runtime", new String[] { "lr_parser", "Scanner", "Symbol", "virtual_parse_stack" });
        packages.put("com.sun.javadoc", new String[] { "AnnotationDesc", "AnnotationTypeDoc", "AnnotationTypeElementDoc", "AnnotationValue", "ClassDoc", "ConstructorDoc", "Doc", "DocErrorReporter", "Doclet", "ExecutableMemberDoc", "FieldDoc", "LanguageVersion", "MemberDoc", "MethodDoc", "PackageDoc", "Parameter", "ParameterizedType", "ParamTag", "ProgramElementDoc", "RootDoc", "SeeTag", "SerialFieldTag", "SourcePosition", "Tag", "ThrowsTag", "Type", "TypeVariable", "WildcardType" });
        packages.put("com.sun.jmx.defaults", new String[] { "JmxProperties", "ServiceName" });
        packages.put("com.sun.jmx.interceptor", new String[] { "DefaultMBeanServerInterceptor", "MBeanServerInterceptor" });
        packages.put("com.sun.jmx.mbeanserver", new String[] { "DescriptorCache", "DynamicMBean2", "GetPropertyAction", "Introspector", "JmxMBeanServer", "JmxMBeanServerBuilder", "MBeanInstantiator", "MBeanSupport", "ModifiableClassLoaderRepository", "MXBeanLookup", "MXBeanProxy", "MXBeanSupport", "NamedObject", "OpenConverter", "Repository", "StandardMBeanSupport", "SunJmxMBeanServer", "Util" });
        packages.put("com.sun.jmx.remote.internal", new String[] { "ArrayNotificationBuffer", "ArrayQueue", "ClientCommunicatorAdmin", "ClientListenerInfo", "ClientNotifForwarder", "NotificationBuffer", "NotificationBufferFilter", "ProxyInputStream", "ProxyRef", "RMIExporter", "ServerCommunicatorAdmin", "ServerNotifForwarder", "Unmarshal" });
        packages.put("com.sun.jmx.remote.protocol.iiop", new String[] { "ClientProvider", "ServerProvider" });
        packages.put("com.sun.jmx.remote.protocol.rmi", new String[] { "ClientProvider", "ServerProvider" });
        packages.put("com.sun.jmx.remote.security", new String[] { "FileLoginModule", "JMXPluggableAuthenticator", "JMXSubjectDomainCombiner", "MBeanServerAccessController", "MBeanServerFileAccessController", "NotificationAccessController", "SubjectDelegator" });
        packages.put("com.sun.jmx.remote.util", new String[] { "CacheMap", "ClassLoaderWithRepository", "ClassLogger", "EnvHelp", "OrderClassLoaders", "Service" });
        packages.put("com.sun.jmx.snmp", new String[] { "BerDecoder", "BerEncoder", "BerException", "Enumerated", "EnumRowStatus", "InetAddressAcl", "ServiceName", "SnmpAckPdu", "SnmpBadSecurityLevelException", "SnmpCounter", "SnmpCounter64", "SnmpDataTypeEnums", "SnmpDefinitions", "SnmpEngine", "SnmpEngineFactory", "SnmpEngineId", "SnmpEngineParameters", "SnmpGauge", "SnmpInt", "SnmpIpAddress", "SnmpMessage", "SnmpMsg", "SnmpNull", "SnmpOid", "SnmpOidDatabase", "SnmpOidDatabaseSupport", "SnmpOidRecord", "SnmpOidTable", "SnmpOidTableSupport", "SnmpOpaque", "SnmpParameters", "SnmpParams", "SnmpPdu", "SnmpPduBulk", "SnmpPduBulkType", "SnmpPduFactory", "SnmpPduFactoryBER", "SnmpPduPacket", "SnmpPduRequest", "SnmpPduRequestType", "SnmpPduTrap", "SnmpPeer", "SnmpScopedPduBulk", "SnmpScopedPduPacket", "SnmpScopedPduRequest", "SnmpSecurityException", "SnmpSecurityParameters", "SnmpStatusException", "SnmpString", "SnmpStringFixed", "SnmpTimeticks", "SnmpTooBigException", "SnmpUnknownAccContrModelException", "SnmpUnknownModelException", "SnmpUnknownModelLcdException", "SnmpUnknownMsgProcModelException", "SnmpUnknownSecModelException", "SnmpUnknownSubSystemException", "SnmpUnsignedInt", "SnmpUsmKeyHandler", "SnmpV3Message", "SnmpValue", "SnmpVarBind", "SnmpVarBindList", "ThreadContext", "Timestamp", "UserAcl" });
        packages.put("com.sun.jmx.snmp.IPAcl", new String[] { "SnmpAcl" });
        packages.put("com.sun.jmx.snmp.agent", new String[] { "SnmpErrorHandlerAgent", "SnmpGenericMetaServer", "SnmpGenericObjectServer", "SnmpIndex", "SnmpMibAgent", "SnmpMibAgentMBean", "SnmpMibEntry", "SnmpMibGroup", "SnmpMibHandler", "SnmpMibNode", "SnmpMibOid", "SnmpMibRequest", "SnmpMibSubRequest", "SnmpMibTable", "SnmpStandardMetaServer", "SnmpStandardObjectServer", "SnmpTableCallbackHandler", "SnmpTableEntryFactory", "SnmpTableEntryNotification", "SnmpTableSupport", "SnmpUserDataFactory" });
        packages.put("com.sun.jmx.snmp.daemon", new String[] { "CommunicationException", "CommunicatorServer", "CommunicatorServerMBean", "SnmpAdaptorServer", "SnmpAdaptorServerMBean", "SnmpInformHandler", "SnmpInformRequest" });
        packages.put("com.sun.jmx.snmp.defaults", new String[] { "DefaultPaths", "SnmpProperties" });
        packages.put("com.sun.jmx.snmp.internal", new String[] { "SnmpAccessControlModel", "SnmpAccessControlSubSystem", "SnmpDecryptedPdu", "SnmpEngineImpl", "SnmpIncomingRequest", "SnmpIncomingResponse", "SnmpLcd", "SnmpModel", "SnmpModelLcd", "SnmpMsgProcessingModel", "SnmpMsgProcessingSubSystem", "SnmpOutgoingRequest", "SnmpSecurityCache", "SnmpSecurityModel", "SnmpSecuritySubSystem", "SnmpSubSystem", "SnmpTools" });
        packages.put("com.sun.jmx.snmp.mpm", new String[] { "SnmpMsgTranslator" });
        packages.put("com.sun.jmx.snmp.tasks", new String[] { "Task", "TaskServer", "ThreadService" });
        packages.put("com.sun.jmx.trace", new String[] { "Trace", "TraceDestination", "TraceImplementation", "TraceManager", "TraceTags" });
        packages.put("com.sun.mirror.apt", new String[] { "AnnotationProcessor", "AnnotationProcessorEnvironment", "AnnotationProcessorFactory", "AnnotationProcessorListener", "AnnotationProcessors", "Filer", "Messager", "RoundCompleteEvent", "RoundCompleteListener", "RoundState" });
        packages.put("com.sun.mirror.declaration", new String[] { "AnnotationMirror", "AnnotationTypeDeclaration", "AnnotationTypeElementDeclaration", "AnnotationValue", "ClassDeclaration", "ConstructorDeclaration", "Declaration", "EnumConstantDeclaration", "EnumDeclaration", "ExecutableDeclaration", "FieldDeclaration", "InterfaceDeclaration", "MemberDeclaration", "MethodDeclaration", "Modifier", "PackageDeclaration", "ParameterDeclaration", "TypeDeclaration", "TypeParameterDeclaration" });
        packages.put("com.sun.mirror.type", new String[] { "AnnotationType", "ArrayType", "ClassType", "DeclaredType", "EnumType", "InterfaceType", "MirroredTypeException", "MirroredTypesException", "PrimitiveType", "ReferenceType", "TypeMirror", "TypeVariable", "VoidType", "WildcardType" });
        packages.put("com.sun.mirror.util", new String[] { "DeclarationFilter", "Declarations", "DeclarationVisitor", "DeclarationVisitors", "SimpleDeclarationVisitor", "SimpleTypeVisitor", "SourcePosition", "Types", "TypeVisitor" });
        packages.put("com.sun.naming.internal", new String[] { "FactoryEnumeration", "ResourceManager", "VersionHelper" });
        packages.put("com.sun.org.apache.bcel.internal", new String[] { "Constants", "ExceptionConstants", "Repository" });
        packages.put("com.sun.org.apache.bcel.internal.classfile", new String[] { "AccessFlags", "Attribute", "AttributeReader", "ClassFormatException", "ClassParser", "Code", "CodeException", "Constant", "ConstantClass", "ConstantCP", "ConstantDouble", "ConstantFieldref", "ConstantFloat", "ConstantInteger", "ConstantInterfaceMethodref", "ConstantLong", "ConstantMethodref", "ConstantNameAndType", "ConstantObject", "ConstantPool", "ConstantString", "ConstantUtf8", "ConstantValue", "Deprecated", "DescendingVisitor", "EmptyVisitor", "ExceptionTable", "Field", "FieldOrMethod", "InnerClass", "InnerClasses", "JavaClass", "LineNumber", "LineNumberTable", "LocalVariable", "LocalVariableTable", "Method", "Node", "PMGClass", "Signature", "SourceFile", "StackMap", "StackMapEntry", "StackMapType", "Synthetic", "Unknown", "Utility", "Visitor" });
        packages.put("com.sun.org.apache.bcel.internal.generic", new String[] { "AALOAD", "AASTORE", "ACONST_NULL", "AllocationInstruction", "ALOAD", "ANEWARRAY", "ARETURN", "ArithmeticInstruction", "ArrayInstruction", "ARRAYLENGTH", "ArrayType", "ASTORE", "ATHROW", "BALOAD", "BasicType", "BASTORE", "BIPUSH", "BranchHandle", "BranchInstruction", "BREAKPOINT", "CALOAD", "CASTORE", "CHECKCAST", "ClassGen", "ClassGenException", "ClassObserver", "CodeExceptionGen", "CompoundInstruction", "ConstantPoolGen", "ConstantPushInstruction", "ConversionInstruction", "CPInstruction", "D2F", "D2I", "D2L", "DADD", "DALOAD", "DASTORE", "DCMPG", "DCMPL", "DCONST", "DDIV", "DLOAD", "DMUL", "DNEG", "DREM", "DRETURN", "DSTORE", "DSUB", "DUP", "DUP2", "DUP2_X1", "DUP2_X2", "DUP_X1", "DUP_X2", "EmptyVisitor", "ExceptionThrower", "F2D", "F2I", "F2L", "FADD", "FALOAD", "FASTORE", "FCMPG", "FCMPL", "FCONST", "FDIV", "FieldGen", "FieldGenOrMethodGen", "FieldInstruction", "FieldObserver", "FieldOrMethod", "FLOAD", "FMUL", "FNEG", "FREM", "FRETURN", "FSTORE", "FSUB", "GETFIELD", "GETSTATIC", "GOTO", "GotoInstruction", "GOTO_W", "I2B", "I2C", "I2D", "I2F", "I2L", "I2S", "IADD", "IALOAD", "IAND", "IASTORE", "ICONST", "IDIV", "IFEQ", "IFGE", "IFGT", "IfInstruction", "IFLE", "IFLT", "IFNE", "IFNONNULL", "IFNULL", "IF_ACMPEQ", "IF_ACMPNE", "IF_ICMPEQ", "IF_ICMPGE", "IF_ICMPGT", "IF_ICMPLE", "IF_ICMPLT", "IF_ICMPNE", "IINC", "ILOAD", "IMPDEP1", "IMPDEP2", "IMUL", "IndexedInstruction", "INEG", "INSTANCEOF", "Instruction", "InstructionComparator", "InstructionConstants", "InstructionFactory", "InstructionHandle", "InstructionList", "InstructionListObserver", "InstructionTargeter", "InvokeInstruction", "INVOKEINTERFACE", "INVOKESPECIAL", "INVOKESTATIC", "INVOKEVIRTUAL", "IOR", "IREM", "IRETURN", "ISHL", "ISHR", "ISTORE", "ISUB", "IUSHR", "IXOR", "JSR", "JsrInstruction", "JSR_W", "L2D", "L2F", "L2I", "LADD", "LALOAD", "LAND", "LASTORE", "LCMP", "LCONST", "LDC", "LDC2_W", "LDC_W", "LDIV", "LineNumberGen", "LLOAD", "LMUL", "LNEG", "LoadClass", "LoadInstruction", "LocalVariableGen", "LocalVariableInstruction", "LOOKUPSWITCH", "LOR", "LREM", "LRETURN", "LSHL", "LSHR", "LSTORE", "LSUB", "LUSHR", "LXOR", "MethodGen", "MethodObserver", "MONITORENTER", "MONITOREXIT", "MULTIANEWARRAY", "NamedAndTyped", "NEW", "NEWARRAY", "NOP", "ObjectType", "POP", "POP2", "PopInstruction", "PUSH", "PushInstruction", "PUTFIELD", "PUTSTATIC", "ReferenceType", "RET", "RETURN", "ReturnaddressType", "ReturnInstruction", "SALOAD", "SASTORE", "Select", "SIPUSH", "StackConsumer", "StackInstruction", "StackProducer", "StoreInstruction", "SWAP", "SWITCH", "TABLESWITCH", "TargetLostException", "Type", "TypedInstruction", "UnconditionalBranch", "VariableLengthInstruction", "Visitor" });
        packages.put("com.sun.org.apache.bcel.internal.util", new String[] { "BCELifier", "ByteSequence", "Class2HTML", "ClassLoader", "ClassLoaderRepository", "ClassPath", "ClassQueue", "ClassSet", "ClassStack", "ClassVector", "InstructionFinder", "JavaWrapper", "Repository", "SyntheticRepository" });
        packages.put("com.sun.org.apache.regexp.internal", new String[] { "CharacterArrayCharacterIterator", "CharacterIterator", "RE", "ReaderCharacterIterator", "recompile", "RECompiler", "REDebugCompiler", "REProgram", "RESyntaxException", "RETest", "REUtil", "StreamCharacterIterator", "StringCharacterIterator" });
        packages.put("com.sun.org.apache.xalan.internal", new String[] { "Version" });
        packages.put("com.sun.org.apache.xalan.internal.extensions", new String[] { "ExpressionContext" });
        packages.put("com.sun.org.apache.xalan.internal.lib", new String[] { "ExsltBase", "ExsltCommon", "ExsltDatetime", "ExsltDynamic", "ExsltMath", "ExsltSets", "ExsltStrings", "Extensions", "NodeInfo" });
        packages.put("com.sun.org.apache.xalan.internal.res", new String[] { "XSLMessages", "XSLTErrorResources", "XSLTErrorResources_de", "XSLTErrorResources_en", "XSLTErrorResources_es", "XSLTErrorResources_fr", "XSLTErrorResources_it", "XSLTErrorResources_ja", "XSLTErrorResources_ko", "XSLTErrorResources_sv", "XSLTErrorResources_zh_CN", "XSLTErrorResources_zh_TW" });
        packages.put("com.sun.org.apache.xalan.internal.templates", new String[] { "Constants" });
        packages.put("com.sun.org.apache.xalan.internal.xslt", new String[] { "EnvironmentCheck", "Process" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc", new String[] { "CollatorFactory", "DOM", "DOMCache", "DOMEnhancedForDTM", "NodeIterator", "ProcessorVersion", "StripFilter", "Translet", "TransletException" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.cmdline", new String[] { "Compile", "Transform" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.cmdline.getopt", new String[] { "GetOpt", "GetOptsException" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.compiler", new String[] { "Closure", "CompilerException", "Constants", "FlowList", "LocationPathPattern", "NodeTest", "Parser", "Pattern", "SourceLoader", "Stylesheet", "sym", "SyntaxTreeNode", "Template", "XPathParser", "XSLTC" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.compiler.util", new String[] { "AttributeSetMethodGenerator", "BooleanType", "ClassGenerator", "CompareGenerator", "ErrorMessages", "ErrorMessages_ca", "ErrorMessages_cs", "ErrorMessages_de", "ErrorMessages_es", "ErrorMessages_fr", "ErrorMessages_it", "ErrorMessages_ja", "ErrorMessages_ko", "ErrorMessages_sk", "ErrorMessages_zh_CN", "ErrorMessages_zh_TW", "ErrorMsg", "FilterGenerator", "IntType", "MatchGenerator", "MethodGenerator", "MethodType", "MultiHashtable", "NamedMethodGenerator", "NodeCounterGenerator", "NodeSetType", "NodeSortRecordFactGenerator", "NodeSortRecordGenerator", "NodeType", "NumberType", "ObjectType", "RealType", "ReferenceType", "ResultTreeType", "RtMethodGenerator", "StringStack", "StringType", "TestGenerator", "Type", "TypeCheckError", "Util", "VoidType" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.dom", new String[] { "AbsoluteIterator", "AdaptiveResultTreeImpl", "AnyNodeCounter", "BitArray", "CachedNodeListIterator", "ClonedNodeListIterator", "CollatorFactoryBase", "CurrentNodeListFilter", "CurrentNodeListIterator", "DocumentCache", "DOMAdapter", "DOMBuilder", "DOMWSFilter", "DupFilterIterator", "EmptyFilter", "ExtendedSAX", "Filter", "FilteredStepIterator", "FilterIterator", "ForwardPositionIterator", "KeyIndex", "LoadDocument", "MatchingIterator", "MultiDOM", "MultipleNodeCounter", "MultiValuedNodeHeapIterator", "NodeCounter", "NodeIteratorBase", "NodeSortRecord", "NodeSortRecordFactory", "NthIterator", "SAXImpl", "SimpleResultTreeImpl", "SingleNodeCounter", "SingletonIterator", "SortingIterator", "StepIterator", "StripWhitespaceFilter", "UnionIterator", "XSLTCDTMManager" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.runtime", new String[] { "AbstractTranslet", "AttributeList", "Attributes", "BasisLibrary", "Constants", "ErrorMessages", "ErrorMessages_ca", "ErrorMessages_cs", "ErrorMessages_de", "ErrorMessages_es", "ErrorMessages_fr", "ErrorMessages_it", "ErrorMessages_ja", "ErrorMessages_ko", "ErrorMessages_sk", "ErrorMessages_zh_CN", "ErrorMessages_zh_TW", "MessageHandler", "Node", "Operators", "Parameter", "StringValueHandler" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.runtime.output", new String[] { "TransletOutputHandlerFactory" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.trax", new String[] { "DOM2SAX", "DOM2TO", "OutputSettings", "SAX2DOM", "SAX2StAXBaseWriter", "SAX2StAXEventWriter", "SAX2StAXStreamWriter", "SmartTransformerFactoryImpl", "StAXEvent2SAX", "StAXStream2SAX", "TemplatesHandlerImpl", "TemplatesImpl", "TransformerFactoryImpl", "TransformerHandlerImpl", "TransformerImpl", "TrAXFilter", "Util", "XSLTCSource" });
        packages.put("com.sun.org.apache.xalan.internal.xsltc.util", new String[] { "IntegerArray" });
        packages.put("com.sun.org.apache.xerces.internal.dom", new String[] { "AttributeMap", "AttrImpl", "AttrNSImpl", "CDATASectionImpl", "CharacterDataImpl", "ChildNode", "CommentImpl", "CoreDocumentImpl", "CoreDOMImplementationImpl", "DeepNodeListImpl", "DeferredAttrImpl", "DeferredAttrNSImpl", "DeferredCDATASectionImpl", "DeferredCommentImpl", "DeferredDocumentImpl", "DeferredDocumentTypeImpl", "DeferredDOMImplementationImpl", "DeferredElementDefinitionImpl", "DeferredElementImpl", "DeferredElementNSImpl", "DeferredEntityImpl", "DeferredEntityReferenceImpl", "DeferredNode", "DeferredNotationImpl", "DeferredProcessingInstructionImpl", "DeferredTextImpl", "DocumentFragmentImpl", "DocumentImpl", "DocumentTypeImpl", "DOMConfigurationImpl", "DOMErrorImpl", "DOMImplementationImpl", "DOMImplementationListImpl", "DOMImplementationSourceImpl", "DOMInputImpl", "DOMLocatorImpl", "DOMMessageFormatter", "DOMNormalizer", "DOMOutputImpl", "DOMStringListImpl", "DOMXSImplementationSourceImpl", "ElementDefinitionImpl", "ElementImpl", "ElementNSImpl", "EntityImpl", "EntityReferenceImpl", "NamedNodeMapImpl", "NodeImpl", "NodeIteratorImpl", "NotationImpl", "ParentNode", "ProcessingInstructionImpl", "PSVIAttrNSImpl", "PSVIDocumentImpl", "PSVIDOMImplementationImpl", "PSVIElementNSImpl", "RangeExceptionImpl", "RangeImpl", "TextImpl", "TreeWalkerImpl" });
        packages.put("com.sun.org.apache.xerces.internal.dom.events", new String[] { "EventImpl", "MutationEventImpl" });
        packages.put("com.sun.org.apache.xerces.internal.impl", new String[] { "Constants", "ExternalSubsetResolver", "PropertyManager", "RevalidationHandler", "Version", "XML11DocumentScannerImpl", "XML11DTDScannerImpl", "XML11EntityScanner", "XML11NamespaceBinder", "XML11NSDocumentScannerImpl", "XMLDocumentFragmentScannerImpl", "XMLDocumentScannerImpl", "XMLDTDScannerImpl", "XMLEntityDescription", "XMLEntityHandler", "XMLEntityManager", "XMLEntityScanner", "XMLErrorReporter", "XMLNamespaceBinder", "XMLNSDocumentScannerImpl", "XMLScanner", "XMLStreamFilterImpl", "XMLStreamReaderImpl", "XMLVersionDetector" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dtd", new String[] { "DTDGrammar", "DTDGrammarBucket", "XML11DTDProcessor", "XML11DTDValidator", "XML11NSDTDValidator", "XMLAttributeDecl", "XMLContentSpec", "XMLDTDDescription", "XMLDTDLoader", "XMLDTDProcessor", "XMLDTDValidator", "XMLDTDValidatorFilter", "XMLElementDecl", "XMLEntityDecl", "XMLNotationDecl", "XMLNSDTDValidator", "XMLSimpleType" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dtd.models", new String[] { "CMAny", "CMBinOp", "CMLeaf", "CMNode", "CMStateSet", "CMUniOp", "ContentModelValidator", "DFAContentModel", "MixedContentModel", "SimpleContentModel" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dv", new String[] { "DatatypeException", "DatatypeValidator", "DTDDVFactory", "DVFactoryException", "InvalidDatatypeFacetException", "InvalidDatatypeValueException", "SchemaDVFactory", "ValidatedInfo", "ValidationContext", "XSFacets", "XSSimpleType" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dv.dtd", new String[] { "DTDDVFactoryImpl", "ENTITYDatatypeValidator", "IDDatatypeValidator", "IDREFDatatypeValidator", "ListDatatypeValidator", "NMTOKENDatatypeValidator", "NOTATIONDatatypeValidator", "StringDatatypeValidator", "XML11DTDDVFactoryImpl", "XML11IDDatatypeValidator", "XML11IDREFDatatypeValidator", "XML11NMTOKENDatatypeValidator" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dv.util", new String[] { "Base64", "ByteListImpl", "HexBin" });
        packages.put("com.sun.org.apache.xerces.internal.impl.dv.xs", new String[] { "AbstractDateTimeDV", "AnySimpleDV", "AnyURIDV", "Base64BinaryDV", "BaseDVFactory", "BooleanDV", "DateDV", "DateTimeDV", "DayDV", "DecimalDV", "DoubleDV", "DurationDV", "EntityDV", "FloatDV", "FullDVFactory", "HexBinaryDV", "IDDV", "IDREFDV", "IntegerDV", "ListDV", "MonthDayDV", "MonthDV", "QNameDV", "SchemaDateTimeException", "SchemaDVFactoryImpl", "StringDV", "TimeDV", "TypeValidator", "UnionDV", "XSSimpleTypeDecl", "YearDV", "YearMonthDV" });
        packages.put("com.sun.org.apache.xerces.internal.impl.io", new String[] { "ASCIIReader", "MalformedByteSequenceException", "UCSReader", "UTF8Reader" });
        packages.put("com.sun.org.apache.xerces.internal.impl.msg", new String[] { "XMLMessageFormatter" });
        packages.put("com.sun.org.apache.xerces.internal.impl.validation", new String[] { "EntityState", "ValidationManager", "ValidationState" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xpath", new String[] { "XPath", "XPathException" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xpath.regex", new String[] { "BMPattern", "Match", "ParseException", "RegularExpression", "REUtil" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs", new String[] { "AttributePSVImpl", "ElementPSVImpl", "SchemaGrammar", "SchemaNamespaceSupport", "SchemaSymbols", "SubstitutionGroupHandler", "XMLSchemaException", "XMLSchemaLoader", "XMLSchemaValidator", "XSAnnotationImpl", "XSAttributeDecl", "XSAttributeGroupDecl", "XSAttributeUseImpl", "XSComplexTypeDecl", "XSConstraints", "XSDDescription", "XSDeclarationPool", "XSElementDecl", "XSGrammarBucket", "XSGroupDecl", "XSImplementationImpl", "XSLoaderImpl", "XSMessageFormatter", "XSModelGroupImpl", "XSModelImpl", "XSNotationDecl", "XSParticleDecl", "XSWildcardDecl" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs.identity", new String[] { "Field", "FieldActivator", "IdentityConstraint", "KeyRef", "Selector", "UniqueOrKey", "ValueStore", "XPathMatcher" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs.models", new String[] { "CMBuilder", "CMNodeFactory", "XSAllCM", "XSCMBinOp", "XSCMLeaf", "XSCMUniOp", "XSCMValidator", "XSDFACM", "XSEmptyCM" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs.opti", new String[] { "AttrImpl", "DefaultDocument", "DefaultElement", "DefaultNode", "DefaultText", "DefaultXMLDocumentHandler", "ElementImpl", "NamedNodeMapImpl", "NodeImpl", "SchemaDOM", "SchemaDOMParser", "SchemaParsingConfig", "TextImpl" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs.traversers", new String[] { "XSAttributeChecker", "XSDHandler" });
        packages.put("com.sun.org.apache.xerces.internal.impl.xs.util", new String[] { "NSItemListImpl", "ShortListImpl", "SimpleLocator", "StringListImpl", "XInt", "XIntPool", "XSGrammarPool", "XSNamedMap4Types", "XSNamedMapImpl", "XSObjectListImpl" });
        packages.put("com.sun.org.apache.xerces.internal.jaxp", new String[] { "DocumentBuilderFactoryImpl", "DocumentBuilderImpl", "JAXPConstants", "SAXParserFactoryImpl", "SAXParserImpl" });
        packages.put("com.sun.org.apache.xerces.internal.jaxp.datatype", new String[] { "DatatypeFactoryImpl", "XMLGregorianCalendarImpl" });
        packages.put("com.sun.org.apache.xerces.internal.jaxp.validation", new String[] { "ErrorHandlerAdaptor", "StAXValidatorHelper", "WrappedSAXException", "XMLSchemaFactory", "XSGrammarPoolContainer" });
        packages.put("com.sun.org.apache.xerces.internal.parsers", new String[] { "AbstractDOMParser", "AbstractSAXParser", "AbstractXMLDocumentParser", "BasicParserConfiguration", "CachingParserPool", "DOMParser", "DOMParserImpl", "DTDConfiguration", "DTDParser", "IntegratedParserConfiguration", "NonValidatingConfiguration", "SAXParser", "SecurityConfiguration", "StandardParserConfiguration", "XIncludeAwareParserConfiguration", "XIncludeParserConfiguration", "XML11Configurable", "XML11Configuration", "XML11DTDConfiguration", "XML11NonValidatingConfiguration", "XMLDocumentParser", "XMLGrammarCachingConfiguration", "XMLGrammarParser", "XMLGrammarPreparser", "XMLParser", "XPointerParserConfiguration" });
        packages.put("com.sun.org.apache.xerces.internal.util", new String[] { "AttributesProxy", "AugmentationsImpl", "DatatypeMessageFormatter", "DefaultErrorHandler", "DOMEntityResolverWrapper", "DOMErrorHandlerWrapper", "DOMInputSource", "DOMUtil", "DraconianErrorHandler", "EncodingMap", "EntityResolver2Wrapper", "EntityResolverWrapper", "ErrorHandlerProxy", "ErrorHandlerWrapper", "HTTPInputSource", "IntStack", "LocatorProxy", "LocatorWrapper", "MessageFormatter", "NamespaceContextWrapper", "NamespaceSupport", "ParserConfigurationSettings", "SAX2XNI", "SAXInputSource", "SAXLocatorWrapper", "SAXMessageFormatter", "SecurityManager", "ShadowedSymbolTable", "SymbolHash", "SymbolTable", "SynchronizedSymbolTable", "TeeXMLDocumentFilterImpl", "TypeInfoImpl", "URI", "XML11Char", "XMLAttributesImpl", "XMLAttributesIteratorImpl", "XMLCatalogResolver", "XMLChar", "XMLDocumentFilterImpl", "XMLEntityDescriptionImpl", "XMLGrammarPoolImpl", "XMLInputSourceAdaptor", "XMLResourceIdentifierImpl", "XMLStringBuffer", "XMLSymbols" });
        packages.put("com.sun.org.apache.xerces.internal.xinclude", new String[] { "MultipleScopeNamespaceSupport", "XInclude11TextReader", "XIncludeHandler", "XIncludeMessageFormatter", "XIncludeNamespaceSupport", "XIncludeTextReader", "XPointerElementHandler", "XPointerFramework", "XPointerSchema" });
        packages.put("com.sun.org.apache.xerces.internal.xni", new String[] { "Augmentations", "NamespaceContext", "QName", "XMLAttributes", "XMLDocumentFragmentHandler", "XMLDocumentHandler", "XMLDTDContentModelHandler", "XMLDTDHandler", "XMLLocator", "XMLResourceIdentifier", "XMLString", "XNIException" });
        packages.put("com.sun.org.apache.xerces.internal.xni.grammars", new String[] { "Grammar", "XMLDTDDescription", "XMLGrammarDescription", "XMLGrammarLoader", "XMLGrammarPool", "XMLSchemaDescription", "XSGrammar" });
        packages.put("com.sun.org.apache.xerces.internal.xni.parser", new String[] { "XMLComponent", "XMLComponentManager", "XMLConfigurationException", "XMLDocumentFilter", "XMLDocumentScanner", "XMLDocumentSource", "XMLDTDContentModelFilter", "XMLDTDContentModelSource", "XMLDTDFilter", "XMLDTDScanner", "XMLDTDSource", "XMLEntityResolver", "XMLErrorHandler", "XMLInputSource", "XMLParseException", "XMLParserConfiguration", "XMLPullParserConfiguration" });
        packages.put("com.sun.org.apache.xerces.internal.xpointer", new String[] { "XPointerHandler", "XPointerPart", "XPointerProcessor" });
        packages.put("com.sun.org.apache.xerces.internal.xs", new String[] { "AttributePSVI", "ElementPSVI", "ItemPSVI", "LSInputList", "PSVIProvider", "ShortList", "StringList", "XSAnnotation", "XSAttributeDeclaration", "XSAttributeGroupDefinition", "XSAttributeUse", "XSComplexTypeDefinition", "XSConstants", "XSElementDeclaration", "XSException", "XSFacet", "XSIDCDefinition", "XSImplementation", "XSLoader", "XSModel", "XSModelGroup", "XSModelGroupDefinition", "XSMultiValueFacet", "XSNamedMap", "XSNamespaceItem", "XSNamespaceItemList", "XSNotationDeclaration", "XSObject", "XSObjectList", "XSParticle", "XSSimpleTypeDefinition", "XSTerm", "XSTypeDefinition", "XSWildcard" });
        packages.put("com.sun.org.apache.xerces.internal.xs.datatypes", new String[] { "ByteList", "ObjectList", "XSDateTime", "XSDecimal", "XSDouble", "XSFloat", "XSQName" });
        packages.put("com.sun.org.apache.xml.internal.dtm", new String[] { "Axis", "DTM", "DTMAxisIterator", "DTMAxisTraverser", "DTMConfigurationException", "DTMDOMException", "DTMException", "DTMFilter", "DTMIterator", "DTMManager", "DTMWSFilter" });
        packages.put("com.sun.org.apache.xml.internal.dtm.ref", new String[] { "CoroutineManager", "CoroutineParser", "CustomStringPool", "DTMAxisIteratorBase", "DTMAxisIterNodeList", "DTMChildIterNodeList", "DTMDefaultBase", "DTMDefaultBaseIterators", "DTMDefaultBaseTraversers", "DTMDocumentImpl", "DTMManagerDefault", "DTMNamedNodeMap", "DTMNodeIterator", "DTMNodeList", "DTMNodeListBase", "DTMNodeProxy", "DTMSafeStringPool", "DTMStringPool", "DTMTreeWalker", "EmptyIterator", "ExpandedNameTable", "ExtendedType", "IncrementalSAXSource", "IncrementalSAXSource_Xerces", "NodeLocator" });
        packages.put("com.sun.org.apache.xml.internal.dtm.ref.dom2dtm", new String[] { "DOM2DTM", "DOM2DTMdefaultNamespaceDeclarationNode" });
        packages.put("com.sun.org.apache.xml.internal.dtm.ref.sax2dtm", new String[] { "SAX2DTM", "SAX2DTM2", "SAX2RTFDTM" });
        packages.put("com.sun.org.apache.xml.internal.res", new String[] { "XMLErrorResources", "XMLErrorResources_ca", "XMLErrorResources_cs", "XMLErrorResources_de", "XMLErrorResources_en", "XMLErrorResources_es", "XMLErrorResources_fr", "XMLErrorResources_it", "XMLErrorResources_ja", "XMLErrorResources_ko", "XMLErrorResources_sk", "XMLErrorResources_sv", "XMLErrorResources_tr", "XMLErrorResources_zh_CN", "XMLErrorResources_zh_HK", "XMLErrorResources_zh_TW", "XMLMessages" });
        packages.put("com.sun.org.apache.xml.internal.resolver", new String[] { "Catalog", "CatalogEntry", "CatalogException", "CatalogManager", "Resolver" });
        packages.put("com.sun.org.apache.xml.internal.resolver.helpers", new String[] { "BootstrapResolver", "Debug", "FileURL", "Namespaces", "PublicId" });
        packages.put("com.sun.org.apache.xml.internal.resolver.readers", new String[] { "CatalogReader", "DOMCatalogParser", "DOMCatalogReader", "ExtendedXMLCatalogReader", "OASISXMLCatalogReader", "SAXCatalogParser", "SAXCatalogReader", "SAXParserHandler", "TextCatalogReader", "TR9401CatalogReader", "XCatalogReader" });
        packages.put("com.sun.org.apache.xml.internal.resolver.tools", new String[] { "CatalogResolver", "ResolvingParser", "ResolvingXMLFilter", "ResolvingXMLReader" });
        packages.put("com.sun.org.apache.xml.internal.security", new String[] { "Init" });
        packages.put("com.sun.org.apache.xml.internal.security.algorithms", new String[] { "Algorithm", "JCEMapper", "MessageDigestAlgorithm", "SignatureAlgorithm", "SignatureAlgorithmSpi" });
        packages.put("com.sun.org.apache.xml.internal.security.algorithms.implementations", new String[] { "IntegrityHmac", "SignatureBaseRSA", "SignatureDSA" });
        packages.put("com.sun.org.apache.xml.internal.security.c14n", new String[] { "CanonicalizationException", "Canonicalizer", "CanonicalizerSpi", "InvalidCanonicalizerException" });
        packages.put("com.sun.org.apache.xml.internal.security.c14n.helper", new String[] { "AttrCompare", "C14nHelper" });
        packages.put("com.sun.org.apache.xml.internal.security.c14n.implementations", new String[] { "Canonicalizer20010315", "Canonicalizer20010315Excl", "Canonicalizer20010315ExclOmitComments", "Canonicalizer20010315ExclWithComments", "Canonicalizer20010315OmitComments", "Canonicalizer20010315WithComments", "CanonicalizerBase", "NameSpaceSymbTable" });
        packages.put("com.sun.org.apache.xml.internal.security.encryption", new String[] { "AgreementMethod", "CipherData", "CipherReference", "CipherValue", "EncryptedData", "EncryptedKey", "EncryptedType", "EncryptionMethod", "EncryptionProperties", "EncryptionProperty", "Reference", "ReferenceList", "Transforms", "XMLCipher", "XMLCipherInput", "XMLCipherParameters", "XMLEncryptionException" });
        packages.put("com.sun.org.apache.xml.internal.security.exceptions", new String[] { "AlgorithmAlreadyRegisteredException", "Base64DecodingException", "XMLSecurityException", "XMLSecurityRuntimeException" });
        packages.put("com.sun.org.apache.xml.internal.security.keys", new String[] { "ContentHandlerAlreadyRegisteredException", "KeyInfo", "KeyUtils" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.content", new String[] { "KeyInfoContent", "KeyName", "KeyValue", "MgmtData", "PGPData", "RetrievalMethod", "SPKIData", "X509Data" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.content.keyvalues", new String[] { "DSAKeyValue", "KeyValueContent", "RSAKeyValue" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.content.x509", new String[] { "XMLX509Certificate", "XMLX509CRL", "XMLX509DataContent", "XMLX509IssuerSerial", "XMLX509SKI", "XMLX509SubjectName" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.keyresolver", new String[] { "InvalidKeyResolverException", "KeyResolver", "KeyResolverException", "KeyResolverSpi" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations", new String[] { "DSAKeyValueResolver", "EncryptedKeyResolver", "RetrievalMethodResolver", "RSAKeyValueResolver", "X509CertificateResolver", "X509IssuerSerialResolver", "X509SKIResolver", "X509SubjectNameResolver" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.storage", new String[] { "StorageResolver", "StorageResolverException", "StorageResolverSpi" });
        packages.put("com.sun.org.apache.xml.internal.security.keys.storage.implementations", new String[] { "CertsInFilesystemDirectoryResolver", "KeyStoreResolver", "SingleCertificateResolver" });
        packages.put("com.sun.org.apache.xml.internal.security.signature", new String[] { "InvalidDigestValueException", "InvalidSignatureValueException", "Manifest", "MissingResourceFailureException", "NodeFilter", "ObjectContainer", "Reference", "ReferenceNotInitializedException", "SignatureProperties", "SignatureProperty", "SignedInfo", "XMLSignature", "XMLSignatureException", "XMLSignatureInput", "XMLSignatureInputDebugger" });
        packages.put("com.sun.org.apache.xml.internal.security.transforms", new String[] { "InvalidTransformException", "Transform", "TransformationException", "TransformParam", "Transforms", "TransformSpi" });
        packages.put("com.sun.org.apache.xml.internal.security.transforms.implementations", new String[] { "FuncHere", "FuncHereContext", "TransformBase64Decode", "TransformC14N", "TransformC14NExclusive", "TransformC14NExclusiveWithComments", "TransformC14NWithComments", "TransformEnvelopedSignature", "TransformXPath", "TransformXPath2Filter", "TransformXPointer", "TransformXSLT" });
        packages.put("com.sun.org.apache.xml.internal.security.transforms.params", new String[] { "InclusiveNamespaces", "XPath2FilterContainer", "XPath2FilterContainer04", "XPathContainer", "XPathFilterCHGPContainer" });
        packages.put("com.sun.org.apache.xml.internal.security.utils", new String[] { "Base64", "CachedXPathAPIHolder", "CachedXPathFuncHereAPI", "Constants", "DigesterOutputStream", "ElementProxy", "EncryptionConstants", "EncryptionElementProxy", "HelperNodeList", "I18n", "IdResolver", "IgnoreAllErrorHandler", "JavaUtils", "RFC2253Parser", "SignatureElementProxy", "SignerOutputStream", "UnsyncBufferedOutputStream", "UnsyncByteArrayOutputStream", "XMLUtils", "XPathFuncHereAPI" });
        packages.put("com.sun.org.apache.xml.internal.security.utils.resolver", new String[] { "ResourceResolver", "ResourceResolverException", "ResourceResolverSpi" });
        packages.put("com.sun.org.apache.xml.internal.security.utils.resolver.implementations", new String[] { "ResolverAnonymous", "ResolverDirectHTTP", "ResolverFragment", "ResolverLocalFilesystem", "ResolverXPointer" });
        packages.put("com.sun.org.apache.xml.internal.serialize", new String[] { "BaseMarkupSerializer", "DOMSerializer", "DOMSerializerImpl", "ElementState", "EncodingInfo", "Encodings", "HTMLdtd", "HTMLSerializer", "IndentPrinter", "LineSeparator", "Method", "OutputFormat", "Printer", "Serializer", "SerializerFactory", "TextSerializer", "XHTMLSerializer", "XML11Serializer", "XMLSerializer" });
        packages.put("com.sun.org.apache.xml.internal.serializer", new String[] { "AttributesImplSerializer", "DOMSerializer", "ElemDesc", "EmptySerializer", "EncodingInfo", "Encodings", "Method", "NamespaceMappings", "OutputPropertiesFactory", "OutputPropertyUtils", "SerializationHandler", "Serializer", "SerializerBase", "SerializerFactory", "SerializerTrace", "ToHTMLSAXHandler", "ToHTMLStream", "ToSAXHandler", "ToStream", "ToTextSAXHandler", "ToTextStream", "ToUnknownStream", "ToXMLSAXHandler", "ToXMLStream", "TransformStateSetter", "TreeWalker", "Version" });
        packages.put("com.sun.org.apache.xml.internal.serializer.utils", new String[] { "AttList", "BoolStack", "DOM2Helper", "Messages", "MsgKey", "SerializerMessages", "SerializerMessages_ca", "SerializerMessages_cs", "SerializerMessages_de", "SerializerMessages_en", "SerializerMessages_es", "SerializerMessages_fr", "SerializerMessages_it", "SerializerMessages_ja", "SerializerMessages_ko", "SerializerMessages_sv", "SerializerMessages_zh_CN", "SerializerMessages_zh_TW", "StringToIntTable", "SystemIDResolver", "Utils", "WrappedRuntimeException" });
        packages.put("com.sun.org.apache.xml.internal.utils", new String[] { "AttList", "BoolStack", "CharKey", "Constants", "DefaultErrorHandler", "DOM2Helper", "DOMBuilder", "DOMHelper", "DOMOrder", "FastStringBuffer", "Hashtree2Node", "IntStack", "IntVector", "ListingErrorHandler", "LocaleUtility", "MutableAttrListImpl", "NameSpace", "NamespaceSupport2", "NodeConsumer", "NodeVector", "NSInfo", "ObjectPool", "ObjectStack", "ObjectVector", "PrefixResolver", "PrefixResolverDefault", "QName", "RawCharacterHandler", "SAXSourceLocator", "SerializableLocatorImpl", "StopParseException", "StringBufferPool", "StringComparable", "StringToIntTable", "StringToStringTable", "StringToStringTableVector", "StringVector", "StylesheetPIHandler", "SuballocatedByteVector", "SuballocatedIntVector", "SystemIDResolver", "ThreadControllerWrapper", "TreeWalker", "Trie", "UnImplNode", "URI", "WrappedRuntimeException", "WrongParserException", "XML11Char", "XMLChar", "XMLCharacterRecognizer", "XMLReaderManager", "XMLString", "XMLStringDefault", "XMLStringFactory", "XMLStringFactoryDefault" });
        packages.put("com.sun.org.apache.xml.internal.utils.res", new String[] { "CharArrayWrapper", "IntArrayWrapper", "LongArrayWrapper", "StringArrayWrapper", "XResourceBundle", "XResourceBundleBase", "XResources_de", "XResources_en", "XResources_es", "XResources_fr", "XResources_it", "XResources_ja_JP_A", "XResources_ja_JP_HA", "XResources_ja_JP_HI", "XResources_ja_JP_I", "XResources_ko", "XResources_sv", "XResources_zh_CN", "XResources_zh_TW" });
        packages.put("com.sun.org.apache.xpath.internal", new String[] { "Arg", "CachedXPathAPI", "Expression", "ExpressionNode", "ExpressionOwner", "ExtensionsProvider", "FoundIndex", "NodeSet", "NodeSetDTM", "SourceTree", "SourceTreeManager", "VariableStack", "WhitespaceStrippingElementMatcher", "XPath", "XPathAPI", "XPathContext", "XPathException", "XPathFactory", "XPathProcessorException", "XPathVisitable", "XPathVisitor" });
        packages.put("com.sun.org.apache.xpath.internal.axes", new String[] { "AttributeIterator", "AxesWalker", "BasicTestIterator", "ChildIterator", "ChildTestIterator", "ContextNodeList", "DescendantIterator", "FilterExprIterator", "FilterExprIteratorSimple", "FilterExprWalker", "HasPositionalPredChecker", "IteratorPool", "LocPathIterator", "MatchPatternIterator", "NodeSequence", "OneStepIterator", "OneStepIteratorForward", "PathComponent", "PredicatedNodeTest", "ReverseAxesWalker", "RTFIterator", "SelfIteratorNoPredicate", "SubContextList", "UnionChildIterator", "UnionPathIterator", "WalkerFactory", "WalkingIterator", "WalkingIteratorSorted" });
        packages.put("com.sun.org.apache.xpath.internal.compiler", new String[] { "Compiler", "FuncLoader", "FunctionTable", "Keywords", "OpCodes", "OpMap", "OpMapVector", "PsuedoNames", "XPathDumper", "XPathParser" });
        packages.put("com.sun.org.apache.xpath.internal.domapi", new String[] { "XPathEvaluatorImpl", "XPathStylesheetDOM3Exception" });
        packages.put("com.sun.org.apache.xpath.internal.functions", new String[] { "FuncBoolean", "FuncCeiling", "FuncConcat", "FuncContains", "FuncCount", "FuncCurrent", "FuncDoclocation", "FuncExtElementAvailable", "FuncExtFunction", "FuncExtFunctionAvailable", "FuncFalse", "FuncFloor", "FuncGenerateId", "FuncId", "FuncLang", "FuncLast", "FuncLocalPart", "FuncNamespace", "FuncNormalizeSpace", "FuncNot", "FuncNumber", "FuncPosition", "FuncQname", "FuncRound", "FuncStartsWith", "FuncString", "FuncStringLength", "FuncSubstring", "FuncSubstringAfter", "FuncSubstringBefore", "FuncSum", "FuncSystemProperty", "Function", "Function2Args", "Function3Args", "FunctionDef1Arg", "FunctionMultiArgs", "FunctionOneArg", "FuncTranslate", "FuncTrue", "FuncUnparsedEntityURI", "WrongNumberArgsException" });
        packages.put("com.sun.org.apache.xpath.internal.jaxp", new String[] { "JAXPExtensionsProvider", "JAXPPrefixResolver", "JAXPVariableStack", "XPathExpressionImpl", "XPathFactoryImpl", "XPathImpl" });
        packages.put("com.sun.org.apache.xpath.internal.objects", new String[] { "DTMXRTreeFrag", "XBoolean", "XBooleanStatic", "XMLStringFactoryImpl", "XNodeSet", "XNodeSetForDOM", "XNull", "XNumber", "XObject", "XObjectFactory", "XRTreeFrag", "XRTreeFragSelectWrapper", "XString", "XStringForChars", "XStringForFSB" });
        packages.put("com.sun.org.apache.xpath.internal.operations", new String[] { "And", "Bool", "Div", "Equals", "Gt", "Gte", "Lt", "Lte", "Minus", "Mod", "Mult", "Neg", "NotEquals", "Number", "Operation", "Or", "Plus", "Quo", "String", "UnaryOperation", "Variable", "VariableSafeAbsRef" });
        packages.put("com.sun.org.apache.xpath.internal.patterns", new String[] { "ContextMatchStepPattern", "FunctionPattern", "NodeTest", "NodeTestFilter", "StepPattern", "UnionPattern" });
        packages.put("com.sun.org.apache.xpath.internal.res", new String[] { "XPATHErrorResources", "XPATHErrorResources_de", "XPATHErrorResources_en", "XPATHErrorResources_es", "XPATHErrorResources_fr", "XPATHErrorResources_it", "XPATHErrorResources_ja", "XPATHErrorResources_ko", "XPATHErrorResources_sv", "XPATHErrorResources_zh_CN", "XPATHErrorResources_zh_TW", "XPATHMessages" });
        packages.put("com.sun.security.auth", new String[] { "LdapPrincipal", "NTDomainPrincipal", "NTNumericCredential", "NTSid", "NTSidDomainPrincipal", "NTSidGroupPrincipal", "NTSidPrimaryGroupPrincipal", "NTSidUserPrincipal", "NTUserPrincipal", "PolicyFile", "PrincipalComparator", "SolarisNumericGroupPrincipal", "SolarisNumericUserPrincipal", "SolarisPrincipal", "UnixNumericGroupPrincipal", "UnixNumericUserPrincipal", "UnixPrincipal", "UserPrincipal", "X500Principal" });
        packages.put("com.sun.security.auth.callback", new String[] { "DialogCallbackHandler", "TextCallbackHandler" });
        packages.put("com.sun.security.auth.login", new String[] { "ConfigFile" });
        packages.put("com.sun.security.auth.module", new String[] { "JndiLoginModule", "KeyStoreLoginModule", "Krb5LoginModule", "LdapLoginModule", "NTLoginModule", "NTSystem", "SolarisLoginModule", "SolarisSystem", "UnixLoginModule", "UnixSystem" });
        packages.put("com.sun.security.jgss", new String[] { "GSSUtil" });
        packages.put("com.sun.source.tree", new String[] { "AnnotationTree", "ArrayAccessTree", "ArrayTypeTree", "AssertTree", "AssignmentTree", "BinaryTree", "BlockTree", "BreakTree", "CaseTree", "CatchTree", "ClassTree", "CompilationUnitTree", "CompoundAssignmentTree", "ConditionalExpressionTree", "ContinueTree", "DoWhileLoopTree", "EmptyStatementTree", "EnhancedForLoopTree", "ErroneousTree", "ExpressionStatementTree", "ExpressionTree", "ForLoopTree", "IdentifierTree", "IfTree", "ImportTree", "InstanceOfTree", "LabeledStatementTree", "LineMap", "LiteralTree", "MemberSelectTree", "MethodInvocationTree", "MethodTree", "ModifiersTree", "NewArrayTree", "NewClassTree", "ParameterizedTypeTree", "ParenthesizedTree", "PrimitiveTypeTree", "ReturnTree", "Scope", "StatementTree", "SwitchTree", "SynchronizedTree", "ThrowTree", "Tree", "TreeVisitor", "TryTree", "TypeCastTree", "TypeParameterTree", "UnaryTree", "VariableTree", "WhileLoopTree", "WildcardTree" });
        packages.put("com.sun.source.util", new String[] { "JavacTask", "SimpleTreeVisitor", "SourcePositions", "TaskEvent", "TaskListener", "TreePath", "TreePathScanner", "Trees", "TreeScanner" });
        packages.put("java.applet", new String[] { "Applet", "AppletContext", "AppletStub", "AudioClip" });
        packages.put("java.awt", new String[] { "ActiveEvent", "Adjustable", "AlphaComposite", "AWTError", "AWTEvent", "AWTEventMulticaster", "AWTException", "AWTKeyStroke", "AWTPermission", "BasicStroke", "BorderLayout", "BufferCapabilities", "Button", "Canvas", "CardLayout", "Checkbox", "CheckboxGroup", "CheckboxMenuItem", "Choice", "Color", "Component", "ComponentOrientation", "Composite", "CompositeContext", "Container", "ContainerOrderFocusTraversalPolicy", "Cursor", "DefaultFocusTraversalPolicy", "DefaultKeyboardFocusManager", "Desktop", "Dialog", "Dimension", "DisplayMode", "Event", "EventQueue", "FileDialog", "FlowLayout", "FocusTraversalPolicy", "Font", "FontFormatException", "FontMetrics", "Frame", "GradientPaint", "Graphics", "Graphics2D", "GraphicsConfigTemplate", "GraphicsConfiguration", "GraphicsDevice", "GraphicsEnvironment", "GridBagConstraints", "GridBagLayout", "GridBagLayoutInfo", "GridLayout", "HeadlessException", "IllegalComponentStateException", "Image", "ImageCapabilities", "Insets", "ItemSelectable", "JobAttributes", "KeyboardFocusManager", "KeyEventDispatcher", "KeyEventPostProcessor", "Label", "LayoutManager", "LayoutManager2", "LinearGradientPaint", "List", "MediaTracker", "Menu", "MenuBar", "MenuComponent", "MenuContainer", "MenuItem", "MenuShortcut", "MouseInfo", "MultipleGradientPaint", "PageAttributes", "Paint", "PaintContext", "Panel", "Point", "PointerInfo", "Polygon", "PopupMenu", "PrintGraphics", "PrintJob", "RadialGradientPaint", "Rectangle", "RenderingHints", "Robot", "Scrollbar", "ScrollPane", "ScrollPaneAdjustable", "Shape", "SplashScreen", "Stroke", "SystemColor", "SystemTray", "TextArea", "TextComponent", "TextField", "TexturePaint", "Toolkit", "Transparency", "TrayIcon", "Window" });
        packages.put("java.awt.color", new String[] { "CMMException", "ColorSpace", "ICC_ColorSpace", "ICC_Profile", "ICC_ProfileGray", "ICC_ProfileRGB", "ProfileDataException" });
        packages.put("java.awt.datatransfer", new String[] { "Clipboard", "ClipboardOwner", "DataFlavor", "FlavorEvent", "FlavorListener", "FlavorMap", "FlavorTable", "MimeTypeParseException", "StringSelection", "SystemFlavorMap", "Transferable", "UnsupportedFlavorException" });
        packages.put("java.awt.dnd", new String[] { "Autoscroll", "DnDConstants", "DragGestureEvent", "DragGestureListener", "DragGestureRecognizer", "DragSource", "DragSourceAdapter", "DragSourceContext", "DragSourceDragEvent", "DragSourceDropEvent", "DragSourceEvent", "DragSourceListener", "DragSourceMotionListener", "DropTarget", "DropTargetAdapter", "DropTargetContext", "DropTargetDragEvent", "DropTargetDropEvent", "DropTargetEvent", "DropTargetListener", "InvalidDnDOperationException", "MouseDragGestureRecognizer" });
        packages.put("java.awt.dnd.peer", new String[] { "DragSourceContextPeer", "DropTargetContextPeer", "DropTargetPeer" });
        packages.put("java.awt.event", new String[] { "ActionEvent", "ActionListener", "AdjustmentEvent", "AdjustmentListener", "AWTEventListener", "AWTEventListenerProxy", "ComponentAdapter", "ComponentEvent", "ComponentListener", "ContainerAdapter", "ContainerEvent", "ContainerListener", "FocusAdapter", "FocusEvent", "FocusListener", "HierarchyBoundsAdapter", "HierarchyBoundsListener", "HierarchyEvent", "HierarchyListener", "InputEvent", "InputMethodEvent", "InputMethodListener", "InvocationEvent", "ItemEvent", "ItemListener", "KeyAdapter", "KeyEvent", "KeyListener", "MouseAdapter", "MouseEvent", "MouseListener", "MouseMotionAdapter", "MouseMotionListener", "MouseWheelEvent", "MouseWheelListener", "PaintEvent", "TextEvent", "TextListener", "WindowAdapter", "WindowEvent", "WindowFocusListener", "WindowListener", "WindowStateListener" });
        packages.put("java.awt.font", new String[] { "FontRenderContext", "GlyphJustificationInfo", "GlyphMetrics", "GlyphVector", "GraphicAttribute", "ImageGraphicAttribute", "LayoutPath", "LineBreakMeasurer", "LineMetrics", "MultipleMaster", "NumericShaper", "OpenType", "ShapeGraphicAttribute", "TextAttribute", "TextHitInfo", "TextLayout", "TextMeasurer", "TransformAttribute" });
        packages.put("java.awt.geom", new String[] { "AffineTransform", "Arc2D", "Area", "CubicCurve2D", "Dimension2D", "Ellipse2D", "FlatteningPathIterator", "GeneralPath", "IllegalPathStateException", "Line2D", "NoninvertibleTransformException", "Path2D", "PathIterator", "Point2D", "QuadCurve2D", "Rectangle2D", "RectangularShape", "RoundRectangle2D" });
        packages.put("java.awt.im", new String[] { "InputContext", "InputMethodHighlight", "InputMethodRequests", "InputSubset" });
        packages.put("java.awt.im.spi", new String[] { "InputMethod", "InputMethodContext", "InputMethodDescriptor" });
        packages.put("java.awt.image", new String[] { "AffineTransformOp", "AreaAveragingScaleFilter", "BandCombineOp", "BandedSampleModel", "BufferedImage", "BufferedImageFilter", "BufferedImageOp", "BufferStrategy", "ByteLookupTable", "ColorConvertOp", "ColorModel", "ComponentColorModel", "ComponentSampleModel", "ConvolveOp", "CropImageFilter", "DataBuffer", "DataBufferByte", "DataBufferDouble", "DataBufferFloat", "DataBufferInt", "DataBufferShort", "DataBufferUShort", "DirectColorModel", "FilteredImageSource", "ImageConsumer", "ImageFilter", "ImageObserver", "ImageProducer", "ImagingOpException", "IndexColorModel", "Kernel", "LookupOp", "LookupTable", "MemoryImageSource", "MultiPixelPackedSampleModel", "PackedColorModel", "PixelGrabber", "PixelInterleavedSampleModel", "Raster", "RasterFormatException", "RasterOp", "RenderedImage", "ReplicateScaleFilter", "RescaleOp", "RGBImageFilter", "SampleModel", "ShortLookupTable", "SinglePixelPackedSampleModel", "TileObserver", "VolatileImage", "WritableRaster", "WritableRenderedImage" });
        packages.put("java.awt.image.renderable", new String[] { "ContextualRenderedImageFactory", "ParameterBlock", "RenderableImage", "RenderableImageOp", "RenderableImageProducer", "RenderContext", "RenderedImageFactory" });
        packages.put("java.awt.peer", new String[] { "ButtonPeer", "CanvasPeer", "CheckboxMenuItemPeer", "CheckboxPeer", "ChoicePeer", "ComponentPeer", "ContainerPeer", "DesktopPeer", "DialogPeer", "FileDialogPeer", "FontPeer", "FramePeer", "KeyboardFocusManagerPeer", "LabelPeer", "LightweightPeer", "ListPeer", "MenuBarPeer", "MenuComponentPeer", "MenuItemPeer", "MenuPeer", "MouseInfoPeer", "PanelPeer", "PopupMenuPeer", "RobotPeer", "ScrollbarPeer", "ScrollPanePeer", "SystemTrayPeer", "TextAreaPeer", "TextComponentPeer", "TextFieldPeer", "TrayIconPeer", "WindowPeer" });
        packages.put("java.awt.print", new String[] { "Book", "Pageable", "PageFormat", "Paper", "Printable", "PrinterAbortException", "PrinterException", "PrinterGraphics", "PrinterIOException", "PrinterJob" });
        packages.put("java.beans", new String[] { "AppletInitializer", "BeanDescriptor", "BeanInfo", "Beans", "Customizer", "DefaultPersistenceDelegate", "DesignMode", "Encoder", "EventHandler", "EventSetDescriptor", "ExceptionListener", "Expression", "FeatureDescriptor", "IndexedPropertyChangeEvent", "IndexedPropertyDescriptor", "IntrospectionException", "Introspector", "MethodDescriptor", "ParameterDescriptor", "PersistenceDelegate", "PropertyChangeEvent", "PropertyChangeListener", "PropertyChangeListenerProxy", "PropertyChangeSupport", "PropertyDescriptor", "PropertyEditor", "PropertyEditorManager", "PropertyEditorSupport", "PropertyVetoException", "SimpleBeanInfo", "Statement", "VetoableChangeListener", "VetoableChangeListenerProxy", "VetoableChangeSupport", "Visibility", "XMLDecoder", "XMLEncoder" });
        packages.put("java.beans.beancontext", new String[] { "BeanContext", "BeanContextChild", "BeanContextChildComponentProxy", "BeanContextChildSupport", "BeanContextContainerProxy", "BeanContextEvent", "BeanContextMembershipEvent", "BeanContextMembershipListener", "BeanContextProxy", "BeanContextServiceAvailableEvent", "BeanContextServiceProvider", "BeanContextServiceProviderBeanInfo", "BeanContextServiceRevokedEvent", "BeanContextServiceRevokedListener", "BeanContextServices", "BeanContextServicesListener", "BeanContextServicesSupport", "BeanContextSupport" });
        packages.put("java.io", new String[] { "BufferedInputStream", "BufferedOutputStream", "BufferedReader", "BufferedWriter", "ByteArrayInputStream", "ByteArrayOutputStream", "CharArrayReader", "CharArrayWriter", "CharConversionException", "Closeable", "Console", "DataInput", "DataInputStream", "DataOutput", "DataOutputStream", "EOFException", "Externalizable", "File", "FileDescriptor", "FileFilter", "FileInputStream", "FilenameFilter", "FileNotFoundException", "FileOutputStream", "FilePermission", "FileReader", "FileWriter", "FilterInputStream", "FilterOutputStream", "FilterReader", "FilterWriter", "Flushable", "InputStream", "InputStreamReader", "InterruptedIOException", "InvalidClassException", "InvalidObjectException", "IOError", "IOException", "LineNumberInputStream", "LineNumberReader", "NotActiveException", "NotSerializableException", "ObjectInput", "ObjectInputStream", "ObjectInputValidation", "ObjectOutput", "ObjectOutputStream", "ObjectStreamClass", "ObjectStreamConstants", "ObjectStreamException", "ObjectStreamField", "OptionalDataException", "OutputStream", "OutputStreamWriter", "PipedInputStream", "PipedOutputStream", "PipedReader", "PipedWriter", "PrintStream", "PrintWriter", "PushbackInputStream", "PushbackReader", "RandomAccessFile", "Reader", "SequenceInputStream", "Serializable", "SerializablePermission", "StreamCorruptedException", "StreamTokenizer", "StringBufferInputStream", "StringReader", "StringWriter", "SyncFailedException", "UnsupportedEncodingException", "UTFDataFormatException", "WriteAbortedException", "Writer" });
        packages.put("java.lang", new String[] { "AbstractMethodError", "Appendable", "ArithmeticException", "ArrayIndexOutOfBoundsException", "ArrayStoreException", "AssertionError", "Boolean", "Byte", "Character", "CharSequence", "Class", "ClassCastException", "ClassCircularityError", "ClassFormatError", "ClassLoader", "ClassNotFoundException", "Cloneable", "CloneNotSupportedException", "Comparable", "Compiler", "Double", "Enum", "EnumConstantNotPresentException", "Error", "Exception", "ExceptionInInitializerError", "Float", "IllegalAccessError", "IllegalAccessException", "IllegalArgumentException", "IllegalMonitorStateException", "IllegalStateException", "IllegalThreadStateException", "IncompatibleClassChangeError", "IndexOutOfBoundsException", "InheritableThreadLocal", "InstantiationError", "InstantiationException", "Integer", "InternalError", "InterruptedException", "Iterable", "LinkageError", "Long", "Math", "NegativeArraySizeException", "NoClassDefFoundError", "NoSuchFieldError", "NoSuchFieldException", "NoSuchMethodError", "NoSuchMethodException", "NullPointerException", "Number", "NumberFormatException", "Object", "OutOfMemoryError", "Package", "Process", "ProcessBuilder", "Readable", "Runnable", "Runtime", "RuntimeException", "RuntimePermission", "SecurityException", "SecurityManager", "Short", "StackOverflowError", "StackTraceElement", "StrictMath", "String", "StringBuffer", "StringBuilder", "StringIndexOutOfBoundsException", "System", "Thread", "ThreadDeath", "ThreadGroup", "ThreadLocal", "Throwable", "TypeNotPresentException", "UnknownError", "UnsatisfiedLinkError", "UnsupportedClassVersionError", "UnsupportedOperationException", "VerifyError", "VirtualMachineError", "Void" });
        packages.put("java.lang.annotation", new String[] { "Annotation", "AnnotationFormatError", "AnnotationTypeMismatchException", "ElementType", "IncompleteAnnotationException", "RetentionPolicy" });
        packages.put("java.lang.instrument", new String[] { "ClassDefinition", "ClassFileTransformer", "IllegalClassFormatException", "Instrumentation", "UnmodifiableClassException" });
        packages.put("java.lang.management", new String[] { "ClassLoadingMXBean", "CompilationMXBean", "GarbageCollectorMXBean", "LockInfo", "ManagementFactory", "ManagementPermission", "MemoryManagerMXBean", "MemoryMXBean", "MemoryNotificationInfo", "MemoryPoolMXBean", "MemoryType", "MemoryUsage", "MonitorInfo", "OperatingSystemMXBean", "RuntimeMXBean", "ThreadInfo", "ThreadMXBean" });
        packages.put("java.lang.ref", new String[] { "PhantomReference", "Reference", "ReferenceQueue", "SoftReference", "WeakReference" });
        packages.put("java.lang.reflect", new String[] { "AccessibleObject", "AnnotatedElement", "Array", "Constructor", "Field", "GenericArrayType", "GenericDeclaration", "GenericSignatureFormatError", "InvocationHandler", "InvocationTargetException", "MalformedParameterizedTypeException", "Member", "Method", "Modifier", "ParameterizedType", "Proxy", "ReflectPermission", "Type", "TypeVariable", "UndeclaredThrowableException", "WildcardType" });
        packages.put("java.math", new String[] { "BigDecimal", "BigInteger", "MathContext", "RoundingMode" });
        packages.put("java.net", new String[] { "Authenticator", "BindException", "CacheRequest", "CacheResponse", "ConnectException", "ContentHandler", "ContentHandlerFactory", "CookieHandler", "CookieManager", "CookiePolicy", "CookieStore", "DatagramPacket", "DatagramSocket", "DatagramSocketImpl", "DatagramSocketImplFactory", "FileNameMap", "HttpCookie", "HttpRetryException", "HttpURLConnection", "IDN", "Inet4Address", "Inet6Address", "InetAddress", "InetSocketAddress", "InterfaceAddress", "JarURLConnection", "MalformedURLException", "MulticastSocket", "NetPermission", "NetworkInterface", "NoRouteToHostException", "PasswordAuthentication", "PortUnreachableException", "ProtocolException", "Proxy", "ProxySelector", "ResponseCache", "SecureCacheResponse", "ServerSocket", "Socket", "SocketAddress", "SocketException", "SocketImpl", "SocketImplFactory", "SocketOptions", "SocketPermission", "SocketTimeoutException", "UnknownHostException", "UnknownServiceException", "URI", "URISyntaxException", "URL", "URLClassLoader", "URLConnection", "URLDecoder", "URLEncoder", "URLStreamHandler", "URLStreamHandlerFactory" });
        packages.put("java.nio", new String[] { "Buffer", "BufferOverflowException", "BufferUnderflowException", "ByteBuffer", "ByteOrder", "CharBuffer", "DoubleBuffer", "FloatBuffer", "IntBuffer", "InvalidMarkException", "LongBuffer", "MappedByteBuffer", "ReadOnlyBufferException", "ShortBuffer" });
        packages.put("java.nio.channels", new String[] { "AlreadyConnectedException", "AsynchronousCloseException", "ByteChannel", "CancelledKeyException", "Channel", "Channels", "ClosedByInterruptException", "ClosedChannelException", "ClosedSelectorException", "ConnectionPendingException", "DatagramChannel", "FileChannel", "FileLock", "FileLockInterruptionException", "GatheringByteChannel", "IllegalBlockingModeException", "IllegalSelectorException", "InterruptibleChannel", "NoConnectionPendingException", "NonReadableChannelException", "NonWritableChannelException", "NotYetBoundException", "NotYetConnectedException", "OverlappingFileLockException", "Pipe", "ReadableByteChannel", "ScatteringByteChannel", "SelectableChannel", "SelectionKey", "Selector", "ServerSocketChannel", "SocketChannel", "UnresolvedAddressException", "UnsupportedAddressTypeException", "WritableByteChannel" });
        packages.put("java.nio.channels.spi", new String[] { "AbstractInterruptibleChannel", "AbstractSelectableChannel", "AbstractSelectionKey", "AbstractSelector", "SelectorProvider" });
        packages.put("java.nio.charset", new String[] { "CharacterCodingException", "Charset", "CharsetDecoder", "CharsetEncoder", "CoderMalfunctionError", "CoderResult", "CodingErrorAction", "IllegalCharsetNameException", "MalformedInputException", "UnmappableCharacterException", "UnsupportedCharsetException" });
        packages.put("java.nio.charset.spi", new String[] { "CharsetProvider" });
        packages.put("java.rmi", new String[] { "AccessException", "AlreadyBoundException", "ConnectException", "ConnectIOException", "MarshalException", "MarshalledObject", "Naming", "NoSuchObjectException", "NotBoundException", "Remote", "RemoteException", "RMISecurityException", "RMISecurityManager", "ServerError", "ServerException", "ServerRuntimeException", "StubNotFoundException", "UnexpectedException", "UnknownHostException", "UnmarshalException" });
        packages.put("java.rmi.activation", new String[] { "Activatable", "ActivateFailedException", "ActivationDesc", "ActivationException", "ActivationGroup", "ActivationGroupDesc", "ActivationGroupID", "ActivationID", "ActivationInstantiator", "ActivationMonitor", "ActivationSystem", "Activator", "UnknownGroupException", "UnknownObjectException" });
        packages.put("java.rmi.dgc", new String[] { "DGC", "Lease", "VMID" });
        packages.put("java.rmi.registry", new String[] { "LocateRegistry", "Registry", "RegistryHandler" });
        packages.put("java.rmi.server", new String[] { "ExportException", "LoaderHandler", "LogStream", "ObjID", "Operation", "RemoteCall", "RemoteObject", "RemoteObjectInvocationHandler", "RemoteRef", "RemoteServer", "RemoteStub", "RMIClassLoader", "RMIClassLoaderSpi", "RMIClientSocketFactory", "RMIFailureHandler", "RMIServerSocketFactory", "RMISocketFactory", "ServerCloneException", "ServerNotActiveException", "ServerRef", "Skeleton", "SkeletonMismatchException", "SkeletonNotFoundException", "SocketSecurityException", "UID", "UnicastRemoteObject", "Unreferenced" });
        packages.put("java.security", new String[] { "AccessControlContext", "AccessControlException", "AccessController", "AlgorithmParameterGenerator", "AlgorithmParameterGeneratorSpi", "AlgorithmParameters", "AlgorithmParametersSpi", "AllPermission", "AuthProvider", "BasicPermission", "Certificate", "CodeSigner", "CodeSource", "DigestException", "DigestInputStream", "DigestOutputStream", "DomainCombiner", "GeneralSecurityException", "Guard", "GuardedObject", "Identity", "IdentityScope", "InvalidAlgorithmParameterException", "InvalidKeyException", "InvalidParameterException", "Key", "KeyException", "KeyFactory", "KeyFactorySpi", "KeyManagementException", "KeyPair", "KeyPairGenerator", "KeyPairGeneratorSpi", "KeyRep", "KeyStore", "KeyStoreException", "KeyStoreSpi", "MessageDigest", "MessageDigestSpi", "NoSuchAlgorithmException", "NoSuchProviderException", "Permission", "PermissionCollection", "Permissions", "Policy", "PolicySpi", "Principal", "PrivateKey", "PrivilegedAction", "PrivilegedActionException", "PrivilegedExceptionAction", "ProtectionDomain", "Provider", "ProviderException", "PublicKey", "SecureClassLoader", "SecureRandom", "SecureRandomSpi", "Security", "SecurityPermission", "Signature", "SignatureException", "SignatureSpi", "SignedObject", "Signer", "Timestamp", "UnrecoverableEntryException", "UnrecoverableKeyException", "UnresolvedPermission", "URIParameter" });
        packages.put("java.security.acl", new String[] { "Acl", "AclEntry", "AclNotFoundException", "Group", "LastOwnerException", "NotOwnerException", "Owner", "Permission" });
        packages.put("java.security.cert", new String[] { "Certificate", "CertificateEncodingException", "CertificateException", "CertificateExpiredException", "CertificateFactory", "CertificateFactorySpi", "CertificateNotYetValidException", "CertificateParsingException", "CertPath", "CertPathBuilder", "CertPathBuilderException", "CertPathBuilderResult", "CertPathBuilderSpi", "CertPathParameters", "CertPathValidator", "CertPathValidatorException", "CertPathValidatorResult", "CertPathValidatorSpi", "CertSelector", "CertStore", "CertStoreException", "CertStoreParameters", "CertStoreSpi", "CollectionCertStoreParameters", "CRL", "CRLException", "CRLSelector", "LDAPCertStoreParameters", "PKIXBuilderParameters", "PKIXCertPathBuilderResult", "PKIXCertPathChecker", "PKIXCertPathValidatorResult", "PKIXParameters", "PolicyNode", "PolicyQualifierInfo", "TrustAnchor", "X509Certificate", "X509CertSelector", "X509CRL", "X509CRLEntry", "X509CRLSelector", "X509Extension" });
        packages.put("java.security.interfaces", new String[] { "DSAKey", "DSAKeyPairGenerator", "DSAParams", "DSAPrivateKey", "DSAPublicKey", "ECKey", "ECPrivateKey", "ECPublicKey", "RSAKey", "RSAMultiPrimePrivateCrtKey", "RSAPrivateCrtKey", "RSAPrivateKey", "RSAPublicKey" });
        packages.put("java.security.spec", new String[] { "AlgorithmParameterSpec", "DSAParameterSpec", "DSAPrivateKeySpec", "DSAPublicKeySpec", "ECField", "ECFieldF2m", "ECFieldFp", "ECGenParameterSpec", "ECParameterSpec", "ECPoint", "ECPrivateKeySpec", "ECPublicKeySpec", "EllipticCurve", "EncodedKeySpec", "InvalidKeySpecException", "InvalidParameterSpecException", "KeySpec", "MGF1ParameterSpec", "PKCS8EncodedKeySpec", "PSSParameterSpec", "RSAKeyGenParameterSpec", "RSAMultiPrimePrivateCrtKeySpec", "RSAOtherPrimeInfo", "RSAPrivateCrtKeySpec", "RSAPrivateKeySpec", "RSAPublicKeySpec", "X509EncodedKeySpec" });
        packages.put("java.sql", new String[] { "Array", "BatchUpdateException", "Blob", "CallableStatement", "ClientInfoStatus", "Clob", "Connection", "DatabaseMetaData", "DataTruncation", "Date", "Driver", "DriverManager", "DriverPropertyInfo", "NClob", "ParameterMetaData", "PreparedStatement", "Ref", "ResultSet", "ResultSetMetaData", "RowId", "RowIdLifetime", "Savepoint", "SQLClientInfoException", "SQLData", "SQLDataException", "SQLException", "SQLFeatureNotSupportedException", "SQLInput", "SQLIntegrityConstraintViolationException", "SQLInvalidAuthorizationSpecException", "SQLNonTransientConnectionException", "SQLNonTransientException", "SQLOutput", "SQLPermission", "SQLRecoverableException", "SQLSyntaxErrorException", "SQLTimeoutException", "SQLTransactionRollbackException", "SQLTransientConnectionException", "SQLTransientException", "SQLWarning", "SQLXML", "Statement", "Struct", "Time", "Timestamp", "Types", "Wrapper" });
        packages.put("java.text", new String[] { "Annotation", "AttributedCharacterIterator", "AttributedString", "Bidi", "BreakIterator", "CharacterIterator", "ChoiceFormat", "CollationElementIterator", "CollationKey", "Collator", "DateFormat", "DateFormatSymbols", "DecimalFormat", "DecimalFormatSymbols", "FieldPosition", "Format", "MessageFormat", "Normalizer", "NumberFormat", "ParseException", "ParsePosition", "RuleBasedCollator", "SimpleDateFormat", "StringCharacterIterator" });
        packages.put("java.text.spi", new String[] { "BreakIteratorProvider", "CollatorProvider", "DateFormatProvider", "DateFormatSymbolsProvider", "DecimalFormatSymbolsProvider", "NumberFormatProvider" });
        packages.put("java.util", new String[] { "AbstractCollection", "AbstractList", "AbstractMap", "AbstractQueue", "AbstractSequentialList", "AbstractSet", "ArrayDeque", "ArrayList", "Arrays", "BitSet", "Calendar", "Collection", "Collections", "Comparator", "ConcurrentModificationException", "Currency", "Date", "Deque", "Dictionary", "DuplicateFormatFlagsException", "EmptyStackException", "Enumeration", "EnumMap", "EnumSet", "EventListener", "EventListenerProxy", "EventObject", "FormatFlagsConversionMismatchException", "Formattable", "FormattableFlags", "Formatter", "FormatterClosedException", "GregorianCalendar", "HashMap", "HashSet", "Hashtable", "IdentityHashMap", "IllegalFormatCodePointException", "IllegalFormatConversionException", "IllegalFormatException", "IllegalFormatFlagsException", "IllegalFormatPrecisionException", "IllegalFormatWidthException", "InputMismatchException", "InvalidPropertiesFormatException", "Iterator", "LinkedHashMap", "LinkedHashSet", "LinkedList", "List", "ListIterator", "ListResourceBundle", "Locale", "Map", "MissingFormatArgumentException", "MissingFormatWidthException", "MissingResourceException", "NavigableMap", "NavigableSet", "NoSuchElementException", "Observable", "Observer", "PriorityQueue", "Properties", "PropertyPermission", "PropertyResourceBundle", "Queue", "Random", "RandomAccess", "ResourceBundle", "Scanner", "ServiceConfigurationError", "ServiceLoader", "Set", "SimpleTimeZone", "SortedMap", "SortedSet", "Stack", "StringTokenizer", "Timer", "TimerTask", "TimeZone", "TooManyListenersException", "TreeMap", "TreeSet", "UnknownFormatConversionException", "UnknownFormatFlagsException", "UUID", "Vector", "WeakHashMap" });
        packages.put("java.util.concurrent", new String[] { "AbstractExecutorService", "ArrayBlockingQueue", "BlockingDeque", "BlockingQueue", "BrokenBarrierException", "Callable", "CancellationException", "CompletionService", "ConcurrentHashMap", "ConcurrentLinkedQueue", "ConcurrentMap", "ConcurrentNavigableMap", "ConcurrentSkipListMap", "ConcurrentSkipListSet", "CopyOnWriteArrayList", "CopyOnWriteArraySet", "CountDownLatch", "CyclicBarrier", "Delayed", "DelayQueue", "Exchanger", "ExecutionException", "Executor", "ExecutorCompletionService", "Executors", "ExecutorService", "Future", "FutureTask", "LinkedBlockingDeque", "LinkedBlockingQueue", "PriorityBlockingQueue", "RejectedExecutionException", "RejectedExecutionHandler", "RunnableFuture", "RunnableScheduledFuture", "ScheduledExecutorService", "ScheduledFuture", "ScheduledThreadPoolExecutor", "Semaphore", "SynchronousQueue", "ThreadFactory", "ThreadPoolExecutor", "TimeoutException", "TimeUnit" });
        packages.put("java.util.concurrent.atomic", new String[] { "AtomicBoolean", "AtomicInteger", "AtomicIntegerArray", "AtomicIntegerFieldUpdater", "AtomicLong", "AtomicLongArray", "AtomicLongFieldUpdater", "AtomicMarkableReference", "AtomicReference", "AtomicReferenceArray", "AtomicReferenceFieldUpdater", "AtomicStampedReference" });
        packages.put("java.util.concurrent.locks", new String[] { "AbstractOwnableSynchronizer", "AbstractQueuedLongSynchronizer", "AbstractQueuedSynchronizer", "Condition", "Lock", "LockSupport", "ReadWriteLock", "ReentrantLock", "ReentrantReadWriteLock" });
        packages.put("java.util.jar", new String[] { "Attributes", "JarEntry", "JarException", "JarFile", "JarInputStream", "JarOutputStream", "Manifest", "Pack200" });
        packages.put("java.util.logging", new String[] { "ConsoleHandler", "ErrorManager", "FileHandler", "Filter", "Formatter", "Handler", "Level", "Logger", "LoggingMXBean", "LoggingPermission", "LogManager", "LogRecord", "MemoryHandler", "SimpleFormatter", "SocketHandler", "StreamHandler", "XMLFormatter" });
        packages.put("java.util.prefs", new String[] { "AbstractPreferences", "BackingStoreException", "InvalidPreferencesFormatException", "NodeChangeEvent", "NodeChangeListener", "PreferenceChangeEvent", "PreferenceChangeListener", "Preferences", "PreferencesFactory" });
        packages.put("java.util.regex", new String[] { "Matcher", "MatchResult", "Pattern", "PatternSyntaxException" });
        packages.put("java.util.spi", new String[] { "CurrencyNameProvider", "LocaleNameProvider", "LocaleServiceProvider", "TimeZoneNameProvider" });
        packages.put("java.util.zip", new String[] { "Adler32", "CheckedInputStream", "CheckedOutputStream", "Checksum", "CRC32", "DataFormatException", "Deflater", "DeflaterInputStream", "DeflaterOutputStream", "GZIPInputStream", "GZIPOutputStream", "Inflater", "InflaterInputStream", "InflaterOutputStream", "ZipEntry", "ZipError", "ZipException", "ZipFile", "ZipInputStream", "ZipOutputStream" });
        packages.put("javax.accessibility", new String[] { "Accessible", "AccessibleAction", "AccessibleAttributeSequence", "AccessibleBundle", "AccessibleComponent", "AccessibleContext", "AccessibleEditableText", "AccessibleExtendedComponent", "AccessibleExtendedTable", "AccessibleExtendedText", "AccessibleHyperlink", "AccessibleHypertext", "AccessibleIcon", "AccessibleKeyBinding", "AccessibleRelation", "AccessibleRelationSet", "AccessibleResourceBundle", "AccessibleRole", "AccessibleSelection", "AccessibleState", "AccessibleStateSet", "AccessibleStreamable", "AccessibleTable", "AccessibleTableModelChange", "AccessibleText", "AccessibleTextSequence", "AccessibleValue" });
        packages.put("javax.annotation.processing", new String[] { "AbstractProcessor", "Completion", "Completions", "Filer", "FilerException", "Messager", "ProcessingEnvironment", "Processor", "RoundEnvironment" });
        packages.put("javax.imageio", new String[] { "IIOException", "IIOImage", "IIOParam", "IIOParamController", "ImageIO", "ImageReader", "ImageReadParam", "ImageTranscoder", "ImageTypeSpecifier", "ImageWriteParam", "ImageWriter" });
        packages.put("javax.imageio.event", new String[] { "IIOReadProgressListener", "IIOReadUpdateListener", "IIOReadWarningListener", "IIOWriteProgressListener", "IIOWriteWarningListener" });
        packages.put("javax.imageio.metadata", new String[] { "IIOInvalidTreeException", "IIOMetadata", "IIOMetadataController", "IIOMetadataFormat", "IIOMetadataFormatImpl" });
        packages.put("javax.imageio.plugins.bmp", new String[] { "BMPImageWriteParam" });
        packages.put("javax.imageio.plugins.jpeg", new String[] { "JPEGHuffmanTable", "JPEGImageReadParam", "JPEGImageWriteParam", "JPEGQTable" });
        packages.put("javax.imageio.spi", new String[] { "IIORegistry", "IIOServiceProvider", "ImageInputStreamSpi", "ImageOutputStreamSpi", "ImageReaderSpi", "ImageReaderWriterSpi", "ImageTranscoderSpi", "ImageWriterSpi", "RegisterableService", "ServiceRegistry" });
        packages.put("javax.imageio.stream", new String[] { "FileCacheImageInputStream", "FileCacheImageOutputStream", "FileImageInputStream", "FileImageOutputStream", "IIOByteBuffer", "ImageInputStream", "ImageInputStreamImpl", "ImageOutputStream", "ImageOutputStreamImpl", "MemoryCacheImageInputStream", "MemoryCacheImageOutputStream" });
        packages.put("javax.lang.model", new String[] { "SourceVersion" });
        packages.put("javax.lang.model.element", new String[] { "AnnotationMirror", "AnnotationValue", "AnnotationValueVisitor", "Element", "ElementKind", "ElementVisitor", "ExecutableElement", "Modifier", "Name", "NestingKind", "PackageElement", "TypeElement", "TypeParameterElement", "UnknownAnnotationValueException", "UnknownElementException", "VariableElement" });
        packages.put("javax.lang.model.type", new String[] { "ArrayType", "DeclaredType", "ErrorType", "ExecutableType", "MirroredTypeException", "MirroredTypesException", "NoType", "NullType", "PrimitiveType", "ReferenceType", "TypeKind", "TypeMirror", "TypeVariable", "TypeVisitor", "UnknownTypeException", "WildcardType" });
        packages.put("javax.lang.model.util", new String[] { "AbstractAnnotationValueVisitor6", "AbstractElementVisitor6", "AbstractTypeVisitor6", "ElementFilter", "ElementKindVisitor6", "Elements", "ElementScanner6", "SimpleAnnotationValueVisitor6", "SimpleElementVisitor6", "SimpleTypeVisitor6", "TypeKindVisitor6", "Types" });
        packages.put("javax.management", new String[] { "Attribute", "AttributeChangeNotification", "AttributeChangeNotificationFilter", "AttributeList", "AttributeNotFoundException", "AttributeValueExp", "BadAttributeValueExpException", "BadBinaryOpValueExpException", "BadStringOperationException", "DefaultLoaderRepository", "Descriptor", "DescriptorAccess", "DescriptorRead", "DynamicMBean", "ImmutableDescriptor", "InstanceAlreadyExistsException", "InstanceNotFoundException", "IntrospectionException", "InvalidApplicationException", "InvalidAttributeValueException", "JMException", "JMRuntimeException", "JMX", "ListenerNotFoundException", "MalformedObjectNameException", "MBeanAttributeInfo", "MBeanConstructorInfo", "MBeanException", "MBeanFeatureInfo", "MBeanInfo", "MBeanNotificationInfo", "MBeanOperationInfo", "MBeanParameterInfo", "MBeanPermission", "MBeanRegistration", "MBeanRegistrationException", "MBeanServer", "MBeanServerBuilder", "MBeanServerConnection", "MBeanServerDelegate", "MBeanServerDelegateMBean", "MBeanServerFactory", "MBeanServerInvocationHandler", "MBeanServerNotification", "MBeanServerPermission", "MBeanTrustPermission", "NotCompliantMBeanException", "Notification", "NotificationBroadcaster", "NotificationBroadcasterSupport", "NotificationEmitter", "NotificationFilter", "NotificationFilterSupport", "NotificationListener", "ObjectInstance", "ObjectName", "OperationsException", "PersistentMBean", "Query", "QueryEval", "QueryExp", "ReflectionException", "RuntimeErrorException", "RuntimeMBeanException", "RuntimeOperationsException", "ServiceNotFoundException", "StandardEmitterMBean", "StandardMBean", "StringValueExp", "ValueExp" });
        packages.put("javax.management.loading", new String[] { "ClassLoaderRepository", "DefaultLoaderRepository", "MLet", "MLetContent", "MLetMBean", "PrivateClassLoader", "PrivateMLet" });
        packages.put("javax.management.modelmbean", new String[] { "DescriptorSupport", "InvalidTargetObjectTypeException", "ModelMBean", "ModelMBeanAttributeInfo", "ModelMBeanConstructorInfo", "ModelMBeanInfo", "ModelMBeanInfoSupport", "ModelMBeanNotificationBroadcaster", "ModelMBeanNotificationInfo", "ModelMBeanOperationInfo", "RequiredModelMBean", "XMLParseException" });
        packages.put("javax.management.monitor", new String[] { "CounterMonitor", "CounterMonitorMBean", "GaugeMonitor", "GaugeMonitorMBean", "Monitor", "MonitorMBean", "MonitorNotification", "MonitorSettingException", "StringMonitor", "StringMonitorMBean" });
        packages.put("javax.management.openmbean", new String[] { "ArrayType", "CompositeData", "CompositeDataInvocationHandler", "CompositeDataSupport", "CompositeDataView", "CompositeType", "InvalidKeyException", "InvalidOpenTypeException", "KeyAlreadyExistsException", "OpenDataException", "OpenMBeanAttributeInfo", "OpenMBeanAttributeInfoSupport", "OpenMBeanConstructorInfo", "OpenMBeanConstructorInfoSupport", "OpenMBeanInfo", "OpenMBeanInfoSupport", "OpenMBeanOperationInfo", "OpenMBeanOperationInfoSupport", "OpenMBeanParameterInfo", "OpenMBeanParameterInfoSupport", "OpenType", "SimpleType", "TabularData", "TabularDataSupport", "TabularType" });
        packages.put("javax.management.relation", new String[] { "InvalidRelationIdException", "InvalidRelationServiceException", "InvalidRelationTypeException", "InvalidRoleInfoException", "InvalidRoleValueException", "MBeanServerNotificationFilter", "Relation", "RelationException", "RelationNotFoundException", "RelationNotification", "RelationService", "RelationServiceMBean", "RelationServiceNotRegisteredException", "RelationSupport", "RelationSupportMBean", "RelationType", "RelationTypeNotFoundException", "RelationTypeSupport", "Role", "RoleInfo", "RoleInfoNotFoundException", "RoleList", "RoleNotFoundException", "RoleResult", "RoleStatus", "RoleUnresolved", "RoleUnresolvedList" });
        packages.put("javax.management.remote", new String[] { "JMXAddressable", "JMXAuthenticator", "JMXConnectionNotification", "JMXConnector", "JMXConnectorFactory", "JMXConnectorProvider", "JMXConnectorServer", "JMXConnectorServerFactory", "JMXConnectorServerMBean", "JMXConnectorServerProvider", "JMXPrincipal", "JMXProviderException", "JMXServerErrorException", "JMXServiceURL", "MBeanServerForwarder", "NotificationResult", "SubjectDelegationPermission", "TargetedNotification" });
        packages.put("javax.management.remote.rmi", new String[] { "RMIConnection", "RMIConnectionImpl", "RMIConnectionImpl_Stub", "RMIConnector", "RMIConnectorServer", "RMIIIOPServerImpl", "RMIJRMPServerImpl", "RMIServer", "RMIServerImpl", "RMIServerImpl_Stub" });
        packages.put("javax.management.timer", new String[] { "Timer", "TimerMBean", "TimerNotification" });
        packages.put("javax.naming", new String[] { "AuthenticationException", "AuthenticationNotSupportedException", "BinaryRefAddr", "Binding", "CannotProceedException", "CommunicationException", "CompositeName", "CompoundName", "ConfigurationException", "Context", "ContextNotEmptyException", "InitialContext", "InsufficientResourcesException", "InterruptedNamingException", "InvalidNameException", "LimitExceededException", "LinkException", "LinkLoopException", "LinkRef", "MalformedLinkException", "Name", "NameAlreadyBoundException", "NameClassPair", "NameNotFoundException", "NameParser", "NamingEnumeration", "NamingException", "NamingSecurityException", "NoInitialContextException", "NoPermissionException", "NotContextException", "OperationNotSupportedException", "PartialResultException", "RefAddr", "Reference", "Referenceable", "ReferralException", "ServiceUnavailableException", "SizeLimitExceededException", "StringRefAddr", "TimeLimitExceededException" });
        packages.put("javax.naming.directory", new String[] { "Attribute", "AttributeInUseException", "AttributeModificationException", "Attributes", "BasicAttribute", "BasicAttributes", "DirContext", "InitialDirContext", "InvalidAttributeIdentifierException", "InvalidAttributesException", "InvalidAttributeValueException", "InvalidSearchControlsException", "InvalidSearchFilterException", "ModificationItem", "NoSuchAttributeException", "SchemaViolationException", "SearchControls", "SearchResult" });
        packages.put("javax.naming.event", new String[] { "EventContext", "EventDirContext", "NamespaceChangeListener", "NamingEvent", "NamingExceptionEvent", "NamingListener", "ObjectChangeListener" });
        packages.put("javax.naming.ldap", new String[] { "BasicControl", "Control", "ControlFactory", "ExtendedRequest", "ExtendedResponse", "HasControls", "InitialLdapContext", "LdapContext", "LdapName", "LdapReferralException", "ManageReferralControl", "PagedResultsControl", "PagedResultsResponseControl", "Rdn", "SortControl", "SortKey", "SortResponseControl", "StartTlsRequest", "StartTlsResponse", "UnsolicitedNotification", "UnsolicitedNotificationEvent", "UnsolicitedNotificationListener" });
        packages.put("javax.naming.spi", new String[] { "DirectoryManager", "DirObjectFactory", "DirStateFactory", "InitialContextFactory", "InitialContextFactoryBuilder", "NamingManager", "ObjectFactory", "ObjectFactoryBuilder", "Resolver", "ResolveResult", "StateFactory" });
        packages.put("javax.print", new String[] { "AttributeException", "CancelablePrintJob", "Doc", "DocFlavor", "DocPrintJob", "FlavorException", "MultiDoc", "MultiDocPrintJob", "MultiDocPrintService", "PrintException", "PrintService", "PrintServiceLookup", "ServiceUI", "ServiceUIFactory", "SimpleDoc", "StreamPrintService", "StreamPrintServiceFactory", "URIException" });
        packages.put("javax.print.attribute", new String[] { "Attribute", "AttributeSet", "AttributeSetUtilities", "DateTimeSyntax", "DocAttribute", "DocAttributeSet", "EnumSyntax", "HashAttributeSet", "HashDocAttributeSet", "HashPrintJobAttributeSet", "HashPrintRequestAttributeSet", "HashPrintServiceAttributeSet", "IntegerSyntax", "PrintJobAttribute", "PrintJobAttributeSet", "PrintRequestAttribute", "PrintRequestAttributeSet", "PrintServiceAttribute", "PrintServiceAttributeSet", "ResolutionSyntax", "SetOfIntegerSyntax", "Size2DSyntax", "SupportedValuesAttribute", "TextSyntax", "UnmodifiableSetException", "URISyntax" });
        packages.put("javax.print.attribute.standard", new String[] { "Chromaticity", "ColorSupported", "Compression", "Copies", "CopiesSupported", "DateTimeAtCompleted", "DateTimeAtCreation", "DateTimeAtProcessing", "Destination", "DocumentName", "Fidelity", "Finishings", "JobHoldUntil", "JobImpressions", "JobImpressionsCompleted", "JobImpressionsSupported", "JobKOctets", "JobKOctetsProcessed", "JobKOctetsSupported", "JobMediaSheets", "JobMediaSheetsCompleted", "JobMediaSheetsSupported", "JobMessageFromOperator", "JobName", "JobOriginatingUserName", "JobPriority", "JobPrioritySupported", "JobSheets", "JobState", "JobStateReason", "JobStateReasons", "Media", "MediaName", "MediaPrintableArea", "MediaSize", "MediaSizeName", "MediaTray", "MultipleDocumentHandling", "NumberOfDocuments", "NumberOfInterveningJobs", "NumberUp", "NumberUpSupported", "OrientationRequested", "OutputDeviceAssigned", "PageRanges", "PagesPerMinute", "PagesPerMinuteColor", "PDLOverrideSupported", "PresentationDirection", "PrinterInfo", "PrinterIsAcceptingJobs", "PrinterLocation", "PrinterMakeAndModel", "PrinterMessageFromOperator", "PrinterMoreInfo", "PrinterMoreInfoManufacturer", "PrinterName", "PrinterResolution", "PrinterState", "PrinterStateReason", "PrinterStateReasons", "PrinterURI", "PrintQuality", "QueuedJobCount", "ReferenceUriSchemesSupported", "RequestingUserName", "Severity", "SheetCollate", "Sides" });
        packages.put("javax.print.event", new String[] { "PrintEvent", "PrintJobAdapter", "PrintJobAttributeEvent", "PrintJobAttributeListener", "PrintJobEvent", "PrintJobListener", "PrintServiceAttributeEvent", "PrintServiceAttributeListener" });
        packages.put("javax.rmi", new String[] { "PortableRemoteObject" });
        packages.put("javax.rmi.CORBA", new String[] { "ClassDesc", "PortableRemoteObjectDelegate", "Stub", "StubDelegate", "Tie", "Util", "UtilDelegate", "ValueHandler", "ValueHandlerMultiFormat" });
        packages.put("javax.rmi.ssl", new String[] { "SslRMIClientSocketFactory", "SslRMIServerSocketFactory" });
        packages.put("javax.script", new String[] { "AbstractScriptEngine", "Bindings", "Compilable", "CompiledScript", "Invocable", "ScriptContext", "ScriptEngine", "ScriptEngineFactory", "ScriptEngineManager", "ScriptException", "SimpleBindings", "SimpleScriptContext" });
        packages.put("javax.security.auth", new String[] { "AuthPermission", "Destroyable", "DestroyFailedException", "Policy", "PrivateCredentialPermission", "Refreshable", "RefreshFailedException", "Subject", "SubjectDomainCombiner" });
        packages.put("javax.security.auth.callback", new String[] { "Callback", "CallbackHandler", "ChoiceCallback", "ConfirmationCallback", "LanguageCallback", "NameCallback", "PasswordCallback", "TextInputCallback", "TextOutputCallback", "UnsupportedCallbackException" });
        packages.put("javax.security.auth.kerberos", new String[] { "DelegationPermission", "KerberosKey", "KerberosPrincipal", "KerberosTicket", "ServicePermission" });
        packages.put("javax.security.auth.login", new String[] { "AccountException", "AccountExpiredException", "AccountLockedException", "AccountNotFoundException", "AppConfigurationEntry", "Configuration", "ConfigurationSpi", "CredentialException", "CredentialExpiredException", "CredentialNotFoundException", "FailedLoginException", "LoginContext", "LoginException" });
        packages.put("javax.security.auth.spi", new String[] { "LoginModule" });
        packages.put("javax.security.auth.x500", new String[] { "X500Principal", "X500PrivateCredential" });
        packages.put("javax.security.sasl", new String[] { "AuthenticationException", "AuthorizeCallback", "RealmCallback", "RealmChoiceCallback", "Sasl", "SaslClient", "SaslClientFactory", "SaslException", "SaslServer", "SaslServerFactory" });
        packages.put("javax.sound.midi", new String[] { "ControllerEventListener", "Instrument", "InvalidMidiDataException", "MetaEventListener", "MetaMessage", "MidiChannel", "MidiDevice", "MidiEvent", "MidiFileFormat", "MidiMessage", "MidiSystem", "MidiUnavailableException", "Patch", "Receiver", "Sequence", "Sequencer", "ShortMessage", "Soundbank", "SoundbankResource", "Synthesizer", "SysexMessage", "Track", "Transmitter", "VoiceStatus" });
        packages.put("javax.sound.midi.spi", new String[] { "MidiDeviceProvider", "MidiFileReader", "MidiFileWriter", "SoundbankReader" });
        packages.put("javax.sound.sampled", new String[] { "AudioFileFormat", "AudioFormat", "AudioInputStream", "AudioPermission", "AudioSystem", "BooleanControl", "Clip", "CompoundControl", "Control", "DataLine", "EnumControl", "FloatControl", "Line", "LineEvent", "LineListener", "LineUnavailableException", "Mixer", "Port", "ReverbType", "SourceDataLine", "TargetDataLine", "UnsupportedAudioFileException" });
        packages.put("javax.sound.sampled.spi", new String[] { "AudioFileReader", "AudioFileWriter", "FormatConversionProvider", "MixerProvider" });
        packages.put("javax.sql", new String[] { "CommonDataSource", "ConnectionEvent", "ConnectionEventListener", "ConnectionPoolDataSource", "DataSource", "PooledConnection", "RowSet", "RowSetEvent", "RowSetInternal", "RowSetListener", "RowSetMetaData", "RowSetReader", "RowSetWriter", "StatementEvent", "StatementEventListener", "XAConnection", "XADataSource" });
        packages.put("javax.sql.rowset", new String[] { "BaseRowSet", "CachedRowSet", "FilteredRowSet", "JdbcRowSet", "Joinable", "JoinRowSet", "Predicate", "RowSetMetaDataImpl", "RowSetWarning", "WebRowSet" });
        packages.put("javax.sql.rowset.serial", new String[] { "SerialArray", "SerialBlob", "SerialClob", "SerialDatalink", "SerialException", "SerialJavaObject", "SerialRef", "SerialStruct", "SQLInputImpl", "SQLOutputImpl" });
        packages.put("javax.sql.rowset.spi", new String[] { "SyncFactory", "SyncFactoryException", "SyncProvider", "SyncProviderException", "SyncResolver", "TransactionalWriter", "XmlReader", "XmlWriter" });
        packages.put("javax.swing", new String[] { "AbstractAction", "AbstractButton", "AbstractCellEditor", "AbstractListModel", "AbstractSpinnerModel", "Action", "ActionMap", "BorderFactory", "BoundedRangeModel", "Box", "BoxLayout", "ButtonGroup", "ButtonModel", "CellEditor", "CellRendererPane", "ComboBoxEditor", "ComboBoxModel", "ComponentInputMap", "DebugGraphics", "DefaultBoundedRangeModel", "DefaultButtonModel", "DefaultCellEditor", "DefaultComboBoxModel", "DefaultDesktopManager", "DefaultFocusManager", "DefaultListCellRenderer", "DefaultListModel", "DefaultListSelectionModel", "DefaultRowSorter", "DefaultSingleSelectionModel", "DesktopManager", "DropMode", "FocusManager", "GrayFilter", "GroupLayout", "Icon", "ImageIcon", "InputMap", "InputVerifier", "InternalFrameFocusTraversalPolicy", "JApplet", "JButton", "JCheckBox", "JCheckBoxMenuItem", "JColorChooser", "JComboBox", "JComponent", "JDesktopPane", "JDialog", "JEditorPane", "JFileChooser", "JFormattedTextField", "JFrame", "JInternalFrame", "JLabel", "JLayeredPane", "JList", "JMenu", "JMenuBar", "JMenuItem", "JOptionPane", "JPanel", "JPasswordField", "JPopupMenu", "JProgressBar", "JRadioButton", "JRadioButtonMenuItem", "JRootPane", "JScrollBar", "JScrollPane", "JSeparator", "JSlider", "JSpinner", "JSplitPane", "JTabbedPane", "JTable", "JTextArea", "JTextField", "JTextPane", "JToggleButton", "JToolBar", "JToolTip", "JTree", "JViewport", "JWindow", "KeyStroke", "LayoutFocusTraversalPolicy", "LayoutStyle", "ListCellRenderer", "ListModel", "ListSelectionModel", "LookAndFeel", "MenuElement", "MenuSelectionManager", "MutableComboBoxModel", "OverlayLayout", "Popup", "PopupFactory", "ProgressMonitor", "ProgressMonitorInputStream", "Renderer", "RepaintManager", "RootPaneContainer", "RowFilter", "RowSorter", "Scrollable", "ScrollPaneConstants", "ScrollPaneLayout", "SingleSelectionModel", "SizeRequirements", "SizeSequence", "SortingFocusTraversalPolicy", "SortOrder", "SpinnerDateModel", "SpinnerListModel", "SpinnerModel", "SpinnerNumberModel", "Spring", "SpringLayout", "SwingConstants", "SwingUtilities", "SwingWorker", "Timer", "ToolTipManager", "TransferHandler", "UIDefaults", "UIManager", "UnsupportedLookAndFeelException", "ViewportLayout", "WindowConstants" });
        packages.put("javax.swing.border", new String[] { "AbstractBorder", "BevelBorder", "Border", "CompoundBorder", "EmptyBorder", "EtchedBorder", "LineBorder", "MatteBorder", "SoftBevelBorder", "TitledBorder" });
        packages.put("javax.swing.colorchooser", new String[] { "AbstractColorChooserPanel", "ColorChooserComponentFactory", "ColorSelectionModel", "DefaultColorSelectionModel" });
        packages.put("javax.swing.event", new String[] { "AncestorEvent", "AncestorListener", "CaretEvent", "CaretListener", "CellEditorListener", "ChangeEvent", "ChangeListener", "DocumentEvent", "DocumentListener", "EventListenerList", "HyperlinkEvent", "HyperlinkListener", "InternalFrameAdapter", "InternalFrameEvent", "InternalFrameListener", "ListDataEvent", "ListDataListener", "ListSelectionEvent", "ListSelectionListener", "MenuDragMouseEvent", "MenuDragMouseListener", "MenuEvent", "MenuKeyEvent", "MenuKeyListener", "MenuListener", "MouseInputAdapter", "MouseInputListener", "PopupMenuEvent", "PopupMenuListener", "RowSorterEvent", "RowSorterListener", "SwingPropertyChangeSupport", "TableColumnModelEvent", "TableColumnModelListener", "TableModelEvent", "TableModelListener", "TreeExpansionEvent", "TreeExpansionListener", "TreeModelEvent", "TreeModelListener", "TreeSelectionEvent", "TreeSelectionListener", "TreeWillExpandListener", "UndoableEditEvent", "UndoableEditListener" });
        packages.put("javax.swing.filechooser", new String[] { "FileFilter", "FileNameExtensionFilter", "FileSystemView", "FileView" });
        packages.put("javax.swing.plaf", new String[] { "ActionMapUIResource", "BorderUIResource", "ButtonUI", "ColorChooserUI", "ColorUIResource", "ComboBoxUI", "ComponentInputMapUIResource", "ComponentUI", "DesktopIconUI", "DesktopPaneUI", "DimensionUIResource", "FileChooserUI", "FontUIResource", "IconUIResource", "InputMapUIResource", "InsetsUIResource", "InternalFrameUI", "LabelUI", "ListUI", "MenuBarUI", "MenuItemUI", "OptionPaneUI", "PanelUI", "PopupMenuUI", "ProgressBarUI", "RootPaneUI", "ScrollBarUI", "ScrollPaneUI", "SeparatorUI", "SliderUI", "SpinnerUI", "SplitPaneUI", "TabbedPaneUI", "TableHeaderUI", "TableUI", "TextUI", "ToolBarUI", "ToolTipUI", "TreeUI", "UIResource", "ViewportUI" });
        packages.put("javax.swing.plaf.basic", new String[] { "BasicArrowButton", "BasicBorders", "BasicButtonListener", "BasicButtonUI", "BasicCheckBoxMenuItemUI", "BasicCheckBoxUI", "BasicColorChooserUI", "BasicComboBoxEditor", "BasicComboBoxRenderer", "BasicComboBoxUI", "BasicComboPopup", "BasicDesktopIconUI", "BasicDesktopPaneUI", "BasicDirectoryModel", "BasicEditorPaneUI", "BasicFileChooserUI", "BasicFormattedTextFieldUI", "BasicGraphicsUtils", "BasicHTML", "BasicIconFactory", "BasicInternalFrameTitlePane", "BasicInternalFrameUI", "BasicLabelUI", "BasicListUI", "BasicLookAndFeel", "BasicMenuBarUI", "BasicMenuItemUI", "BasicMenuUI", "BasicOptionPaneUI", "BasicPanelUI", "BasicPasswordFieldUI", "BasicPopupMenuSeparatorUI", "BasicPopupMenuUI", "BasicProgressBarUI", "BasicRadioButtonMenuItemUI", "BasicRadioButtonUI", "BasicRootPaneUI", "BasicScrollBarUI", "BasicScrollPaneUI", "BasicSeparatorUI", "BasicSliderUI", "BasicSpinnerUI", "BasicSplitPaneDivider", "BasicSplitPaneUI", "BasicTabbedPaneUI", "BasicTableHeaderUI", "BasicTableUI", "BasicTextAreaUI", "BasicTextFieldUI", "BasicTextPaneUI", "BasicTextUI", "BasicToggleButtonUI", "BasicToolBarSeparatorUI", "BasicToolBarUI", "BasicToolTipUI", "BasicTreeUI", "BasicViewportUI", "ComboPopup", "DefaultMenuLayout" });
        packages.put("javax.swing.plaf.metal", new String[] { "DefaultMetalTheme", "MetalBorders", "MetalButtonUI", "MetalCheckBoxIcon", "MetalCheckBoxUI", "MetalComboBoxButton", "MetalComboBoxEditor", "MetalComboBoxIcon", "MetalComboBoxUI", "MetalDesktopIconUI", "MetalFileChooserUI", "MetalIconFactory", "MetalInternalFrameTitlePane", "MetalInternalFrameUI", "MetalLabelUI", "MetalLookAndFeel", "MetalMenuBarUI", "MetalPopupMenuSeparatorUI", "MetalProgressBarUI", "MetalRadioButtonUI", "MetalRootPaneUI", "MetalScrollBarUI", "MetalScrollButton", "MetalScrollPaneUI", "MetalSeparatorUI", "MetalSliderUI", "MetalSplitPaneUI", "MetalTabbedPaneUI", "MetalTextFieldUI", "MetalTheme", "MetalToggleButtonUI", "MetalToolBarUI", "MetalToolTipUI", "MetalTreeUI", "OceanTheme" });
        packages.put("javax.swing.plaf.multi", new String[] { "MultiButtonUI", "MultiColorChooserUI", "MultiComboBoxUI", "MultiDesktopIconUI", "MultiDesktopPaneUI", "MultiFileChooserUI", "MultiInternalFrameUI", "MultiLabelUI", "MultiListUI", "MultiLookAndFeel", "MultiMenuBarUI", "MultiMenuItemUI", "MultiOptionPaneUI", "MultiPanelUI", "MultiPopupMenuUI", "MultiProgressBarUI", "MultiRootPaneUI", "MultiScrollBarUI", "MultiScrollPaneUI", "MultiSeparatorUI", "MultiSliderUI", "MultiSpinnerUI", "MultiSplitPaneUI", "MultiTabbedPaneUI", "MultiTableHeaderUI", "MultiTableUI", "MultiTextUI", "MultiToolBarUI", "MultiToolTipUI", "MultiTreeUI", "MultiViewportUI" });
        packages.put("javax.swing.plaf.synth", new String[] { "ColorType", "Region", "SynthConstants", "SynthContext", "SynthGraphicsUtils", "SynthLookAndFeel", "SynthPainter", "SynthStyle", "SynthStyleFactory" });
        packages.put("javax.swing.table", new String[] { "AbstractTableModel", "DefaultTableCellRenderer", "DefaultTableColumnModel", "DefaultTableModel", "JTableHeader", "TableCellEditor", "TableCellRenderer", "TableColumn", "TableColumnModel", "TableModel", "TableRowSorter", "TableStringConverter" });
        packages.put("javax.swing.text", new String[] { "AbstractDocument", "AbstractWriter", "AsyncBoxView", "AttributeSet", "BadLocationException", "BoxView", "Caret", "ChangedCharSetException", "ComponentView", "CompositeView", "DateFormatter", "DefaultCaret", "DefaultEditorKit", "DefaultFormatter", "DefaultFormatterFactory", "DefaultHighlighter", "DefaultStyledDocument", "DefaultTextUI", "Document", "DocumentFilter", "EditorKit", "Element", "ElementIterator", "FieldView", "FlowView", "GapContent", "GlyphView", "Highlighter", "IconView", "InternationalFormatter", "JTextComponent", "Keymap", "LabelView", "LayeredHighlighter", "LayoutQueue", "MaskFormatter", "MutableAttributeSet", "NavigationFilter", "NumberFormatter", "ParagraphView", "PasswordView", "PlainDocument", "PlainView", "Position", "Segment", "SimpleAttributeSet", "StringContent", "Style", "StyleConstants", "StyleContext", "StyledDocument", "StyledEditorKit", "TabableView", "TabExpander", "TableView", "TabSet", "TabStop", "TextAction", "Utilities", "View", "ViewFactory", "WrappedPlainView", "ZoneView" });
        packages.put("javax.swing.text.html", new String[] { "BlockView", "CSS", "FormSubmitEvent", "FormView", "HTML", "HTMLDocument", "HTMLEditorKit", "HTMLFrameHyperlinkEvent", "HTMLWriter", "ImageView", "InlineView", "ListView", "MinimalHTMLWriter", "ObjectView", "Option", "ParagraphView", "StyleSheet" });
        packages.put("javax.swing.text.html.parser", new String[] { "AttributeList", "ContentModel", "DocumentParser", "DTD", "DTDConstants", "Element", "Entity", "Parser", "ParserDelegator", "TagElement" });
        packages.put("javax.swing.text.rtf", new String[] { "RTFEditorKit" });
        packages.put("javax.swing.tree", new String[] { "AbstractLayoutCache", "DefaultMutableTreeNode", "DefaultTreeCellEditor", "DefaultTreeCellRenderer", "DefaultTreeModel", "DefaultTreeSelectionModel", "ExpandVetoException", "FixedHeightLayoutCache", "MutableTreeNode", "RowMapper", "TreeCellEditor", "TreeCellRenderer", "TreeModel", "TreeNode", "TreePath", "TreeSelectionModel", "VariableHeightLayoutCache" });
        packages.put("javax.swing.undo", new String[] { "AbstractUndoableEdit", "CannotRedoException", "CannotUndoException", "CompoundEdit", "StateEdit", "StateEditable", "UndoableEdit", "UndoableEditSupport", "UndoManager" });
        packages.put("javax.tools", new String[] { "Diagnostic", "DiagnosticCollector", "DiagnosticListener", "FileObject", "ForwardingFileObject", "ForwardingJavaFileManager", "ForwardingJavaFileObject", "JavaCompiler", "JavaFileManager", "JavaFileObject", "OptionChecker", "SimpleJavaFileObject", "StandardJavaFileManager", "StandardLocation", "Tool", "ToolProvider" });
        packages.put("javax.xml", new String[] { "XMLConstants" });
        packages.put("javax.xml.bind", new String[] { "Binder", "DataBindingException", "DatatypeConverter", "DatatypeConverterInterface", "Element", "JAXB", "JAXBContext", "JAXBElement", "JAXBException", "JAXBIntrospector", "MarshalException", "Marshaller", "NotIdentifiableEvent", "ParseConversionEvent", "PrintConversionEvent", "PropertyException", "SchemaOutputResolver", "TypeConstraintException", "UnmarshalException", "Unmarshaller", "UnmarshallerHandler", "ValidationEvent", "ValidationEventHandler", "ValidationEventLocator", "ValidationException", "Validator" });
        packages.put("javax.xml.bind.annotation", new String[] { "DomHandler", "W3CDomHandler", "XmlAccessOrder", "XmlAccessType", "XmlNsForm" });
        packages.put("javax.xml.bind.annotation.adapters", new String[] { "CollapsedStringAdapter", "HexBinaryAdapter", "NormalizedStringAdapter", "XmlAdapter" });
        packages.put("javax.xml.bind.attachment", new String[] { "AttachmentMarshaller", "AttachmentUnmarshaller" });
        packages.put("javax.xml.bind.helpers", new String[] { "AbstractMarshallerImpl", "AbstractUnmarshallerImpl", "DefaultValidationEventHandler", "NotIdentifiableEventImpl", "ParseConversionEventImpl", "PrintConversionEventImpl", "ValidationEventImpl", "ValidationEventLocatorImpl" });
        packages.put("javax.xml.bind.util", new String[] { "JAXBResult", "JAXBSource", "ValidationEventCollector" });
        packages.put("javax.xml.crypto", new String[] { "AlgorithmMethod", "Data", "KeySelector", "KeySelectorException", "KeySelectorResult", "MarshalException", "NodeSetData", "NoSuchMechanismException", "OctetStreamData", "URIDereferencer", "URIReference", "URIReferenceException", "XMLCryptoContext", "XMLStructure" });
        packages.put("javax.xml.crypto.dom", new String[] { "DOMCryptoContext", "DOMStructure", "DOMURIReference" });
        packages.put("javax.xml.crypto.dsig", new String[] { "CanonicalizationMethod", "DigestMethod", "Manifest", "Reference", "SignatureMethod", "SignatureProperties", "SignatureProperty", "SignedInfo", "Transform", "TransformException", "TransformService", "XMLObject", "XMLSignature", "XMLSignatureException", "XMLSignatureFactory", "XMLSignContext", "XMLValidateContext" });
        packages.put("javax.xml.crypto.dsig.dom", new String[] { "DOMSignContext", "DOMValidateContext" });
        packages.put("javax.xml.crypto.dsig.keyinfo", new String[] { "KeyInfo", "KeyInfoFactory", "KeyName", "KeyValue", "PGPData", "RetrievalMethod", "X509Data", "X509IssuerSerial" });
        packages.put("javax.xml.crypto.dsig.spec", new String[] { "C14NMethodParameterSpec", "DigestMethodParameterSpec", "ExcC14NParameterSpec", "HMACParameterSpec", "SignatureMethodParameterSpec", "TransformParameterSpec", "XPathFilter2ParameterSpec", "XPathFilterParameterSpec", "XPathType", "XSLTTransformParameterSpec" });
        packages.put("javax.xml.datatype", new String[] { "DatatypeConfigurationException", "DatatypeConstants", "DatatypeFactory", "Duration", "XMLGregorianCalendar" });
        packages.put("javax.xml.namespace", new String[] { "NamespaceContext", "QName" });
        packages.put("javax.xml.parsers", new String[] { "DocumentBuilder", "DocumentBuilderFactory", "FactoryConfigurationError", "ParserConfigurationException", "SAXParser", "SAXParserFactory" });
        packages.put("javax.xml.soap", new String[] { "AttachmentPart", "Detail", "DetailEntry", "MessageFactory", "MimeHeader", "MimeHeaders", "Name", "Node", "SAAJMetaFactory", "SAAJResult", "SOAPBody", "SOAPBodyElement", "SOAPConnection", "SOAPConnectionFactory", "SOAPConstants", "SOAPElement", "SOAPElementFactory", "SOAPEnvelope", "SOAPException", "SOAPFactory", "SOAPFault", "SOAPFaultElement", "SOAPHeader", "SOAPHeaderElement", "SOAPMessage", "SOAPPart", "Text" });
        packages.put("javax.xml.stream", new String[] { "EventFilter", "FactoryConfigurationError", "Location", "StreamFilter", "XMLEventFactory", "XMLEventReader", "XMLEventWriter", "XMLInputFactory", "XMLOutputFactory", "XMLReporter", "XMLResolver", "XMLStreamConstants", "XMLStreamException", "XMLStreamReader", "XMLStreamWriter" });
        packages.put("javax.xml.stream.events", new String[] { "Attribute", "Characters", "Comment", "DTD", "EndDocument", "EndElement", "EntityDeclaration", "EntityReference", "Namespace", "NotationDeclaration", "ProcessingInstruction", "StartDocument", "StartElement", "XMLEvent" });
        packages.put("javax.xml.stream.util", new String[] { "EventReaderDelegate", "StreamReaderDelegate", "XMLEventAllocator", "XMLEventConsumer" });
        packages.put("javax.xml.transform", new String[] { "ErrorListener", "OutputKeys", "Result", "Source", "SourceLocator", "Templates", "Transformer", "TransformerConfigurationException", "TransformerException", "TransformerFactory", "TransformerFactoryConfigurationError", "URIResolver" });
        packages.put("javax.xml.transform.dom", new String[] { "DOMLocator", "DOMResult", "DOMSource" });
        packages.put("javax.xml.transform.sax", new String[] { "SAXResult", "SAXSource", "SAXTransformerFactory", "TemplatesHandler", "TransformerHandler" });
        packages.put("javax.xml.transform.stax", new String[] { "StAXResult", "StAXSource" });
        packages.put("javax.xml.transform.stream", new String[] { "StreamResult", "StreamSource" });
        packages.put("javax.xml.validation", new String[] { "Schema", "SchemaFactory", "SchemaFactoryLoader", "TypeInfoProvider", "Validator", "ValidatorHandler" });
        packages.put("javax.xml.ws", new String[] { "AsyncHandler", "Binding", "BindingProvider", "Dispatch", "Endpoint", "EndpointReference", "Holder", "LogicalMessage", "ProtocolException", "Provider", "RespectBindingFeature", "Response", "Service", "WebServiceContext", "WebServiceException", "WebServiceFeature", "WebServicePermission" });
        packages.put("javax.xml.ws.handler", new String[] { "Handler", "HandlerResolver", "LogicalHandler", "LogicalMessageContext", "MessageContext", "PortInfo" });
        packages.put("javax.xml.ws.handler.soap", new String[] { "SOAPHandler", "SOAPMessageContext" });
        packages.put("javax.xml.ws.http", new String[] { "HTTPBinding", "HTTPException" });
        packages.put("javax.xml.ws.soap", new String[] { "AddressingFeature", "MTOMFeature", "SOAPBinding", "SOAPFaultException" });
        packages.put("javax.xml.ws.spi", new String[] { "Provider", "ServiceDelegate" });
        packages.put("javax.xml.ws.wsaddressing", new String[] { "W3CEndpointReference", "W3CEndpointReferenceBuilder" });
        packages.put("javax.xml.xpath", new String[] { "XPath", "XPathConstants", "XPathException", "XPathExpression", "XPathExpressionException", "XPathFactory", "XPathFactoryConfigurationException", "XPathFunction", "XPathFunctionException", "XPathFunctionResolver", "XPathVariableResolver" });
        packages.put("org.ietf.jgss", new String[] { "ChannelBinding", "GSSContext", "GSSCredential", "GSSException", "GSSManager", "GSSName", "MessageProp", "Oid" });
        packages.put("org.omg.CORBA", new String[] { "ACTIVITY_COMPLETED", "ACTIVITY_REQUIRED", "Any", "AnyHolder", "AnySeqHelper", "AnySeqHolder", "ARG_IN", "ARG_INOUT", "ARG_OUT", "BAD_CONTEXT", "BAD_INV_ORDER", "BAD_OPERATION", "BAD_PARAM", "BAD_POLICY", "BAD_POLICY_TYPE", "BAD_POLICY_VALUE", "BAD_QOS", "BAD_TYPECODE", "BooleanHolder", "BooleanSeqHelper", "BooleanSeqHolder", "Bounds", "ByteHolder", "CharHolder", "CharSeqHelper", "CharSeqHolder", "CODESET_INCOMPATIBLE", "COMM_FAILURE", "CompletionStatus", "CompletionStatusHelper", "Context", "ContextList", "CTX_RESTRICT_SCOPE", "Current", "CurrentHelper", "CurrentHolder", "CurrentOperations", "CustomMarshal", "DataInputStream", "DataOutputStream", "DATA_CONVERSION", "DefinitionKind", "DefinitionKindHelper", "DomainManager", "DomainManagerOperations", "DoubleHolder", "DoubleSeqHelper", "DoubleSeqHolder", "DynamicImplementation", "DynAny", "DynArray", "DynEnum", "DynFixed", "DynSequence", "DynStruct", "DynUnion", "DynValue", "Environment", "ExceptionList", "FieldNameHelper", "FixedHolder", "FloatHolder", "FloatSeqHelper", "FloatSeqHolder", "FREE_MEM", "IdentifierHelper", "IDLType", "IDLTypeHelper", "IDLTypeOperations", "IMP_LIMIT", "INITIALIZE", "INTERNAL", "INTF_REPOS", "IntHolder", "INVALID_ACTIVITY", "INVALID_TRANSACTION", "INV_FLAG", "INV_IDENT", "INV_OBJREF", "INV_POLICY", "IRObject", "IRObjectOperations", "LocalObject", "LongHolder", "LongLongSeqHelper", "LongLongSeqHolder", "LongSeqHelper", "LongSeqHolder", "MARSHAL", "NamedValue", "NameValuePair", "NameValuePairHelper", "NO_IMPLEMENT", "NO_MEMORY", "NO_PERMISSION", "NO_RESOURCES", "NO_RESPONSE", "NVList", "Object", "ObjectHelper", "ObjectHolder", "OBJECT_NOT_EXIST", "OBJ_ADAPTER", "OctetSeqHelper", "OctetSeqHolder", "OMGVMCID", "ORB", "ParameterMode", "ParameterModeHelper", "ParameterModeHolder", "PERSIST_STORE", "Policy", "PolicyError", "PolicyErrorCodeHelper", "PolicyErrorHelper", "PolicyErrorHolder", "PolicyHelper", "PolicyHolder", "PolicyListHelper", "PolicyListHolder", "PolicyOperations", "PolicyTypeHelper", "Principal", "PrincipalHolder", "PRIVATE_MEMBER", "PUBLIC_MEMBER", "REBIND", "RepositoryIdHelper", "Request", "ServerRequest", "ServiceDetail", "ServiceDetailHelper", "ServiceInformation", "ServiceInformationHelper", "ServiceInformationHolder", "SetOverrideType", "SetOverrideTypeHelper", "ShortHolder", "ShortSeqHelper", "ShortSeqHolder", "StringHolder", "StringSeqHelper", "StringSeqHolder", "StringValueHelper", "StructMember", "StructMemberHelper", "SystemException", "TCKind", "TIMEOUT", "TRANSACTION_MODE", "TRANSACTION_REQUIRED", "TRANSACTION_ROLLEDBACK", "TRANSACTION_UNAVAILABLE", "TRANSIENT", "TypeCode", "TypeCodeHolder", "ULongLongSeqHelper", "ULongLongSeqHolder", "ULongSeqHelper", "ULongSeqHolder", "UnionMember", "UnionMemberHelper", "UNKNOWN", "UnknownUserException", "UnknownUserExceptionHelper", "UnknownUserExceptionHolder", "UNSUPPORTED_POLICY", "UNSUPPORTED_POLICY_VALUE", "UserException", "UShortSeqHelper", "UShortSeqHolder", "ValueBaseHelper", "ValueBaseHolder", "ValueMember", "ValueMemberHelper", "VersionSpecHelper", "VisibilityHelper", "VM_ABSTRACT", "VM_CUSTOM", "VM_NONE", "VM_TRUNCATABLE", "WCharSeqHelper", "WCharSeqHolder", "WrongTransaction", "WrongTransactionHelper", "WrongTransactionHolder", "WStringSeqHelper", "WStringSeqHolder", "WStringValueHelper", "_IDLTypeStub", "_PolicyStub" });
        packages.put("org.omg.CORBA.DynAnyPackage", new String[] { "Invalid", "InvalidSeq", "InvalidValue", "TypeMismatch" });
        packages.put("org.omg.CORBA.ORBPackage", new String[] { "InconsistentTypeCode", "InvalidName" });
        packages.put("org.omg.CORBA.TypeCodePackage", new String[] { "BadKind", "Bounds" });
        packages.put("org.omg.CORBA.portable", new String[] { "ApplicationException", "BoxedValueHelper", "CustomValue", "Delegate", "IDLEntity", "IndirectionException", "InputStream", "InvokeHandler", "ObjectImpl", "OutputStream", "RemarshalException", "ResponseHandler", "ServantObject", "Streamable", "StreamableValue", "UnknownException", "ValueBase", "ValueFactory", "ValueInputStream", "ValueOutputStream" });
        packages.put("org.omg.CORBA_2_3", new String[] { "ORB" });
        packages.put("org.omg.CORBA_2_3.portable", new String[] { "Delegate", "InputStream", "ObjectImpl", "OutputStream" });
        packages.put("org.omg.CosNaming", new String[] { "Binding", "BindingHelper", "BindingHolder", "BindingIterator", "BindingIteratorHelper", "BindingIteratorHolder", "BindingIteratorOperations", "BindingIteratorPOA", "BindingListHelper", "BindingListHolder", "BindingType", "BindingTypeHelper", "BindingTypeHolder", "IstringHelper", "NameComponent", "NameComponentHelper", "NameComponentHolder", "NameHelper", "NameHolder", "NamingContext", "NamingContextExt", "NamingContextExtHelper", "NamingContextExtHolder", "NamingContextExtOperations", "NamingContextExtPOA", "NamingContextHelper", "NamingContextHolder", "NamingContextOperations", "NamingContextPOA", "_BindingIteratorImplBase", "_BindingIteratorStub", "_NamingContextExtStub", "_NamingContextImplBase", "_NamingContextStub" });
        packages.put("org.omg.CosNaming.NamingContextExtPackage", new String[] { "AddressHelper", "InvalidAddress", "InvalidAddressHelper", "InvalidAddressHolder", "StringNameHelper", "URLStringHelper" });
        packages.put("org.omg.CosNaming.NamingContextPackage", new String[] { "AlreadyBound", "AlreadyBoundHelper", "AlreadyBoundHolder", "CannotProceed", "CannotProceedHelper", "CannotProceedHolder", "InvalidName", "InvalidNameHelper", "InvalidNameHolder", "NotEmpty", "NotEmptyHelper", "NotEmptyHolder", "NotFound", "NotFoundHelper", "NotFoundHolder", "NotFoundReason", "NotFoundReasonHelper", "NotFoundReasonHolder" });
        packages.put("org.omg.Dynamic", new String[] { "Parameter" });
        packages.put("org.omg.DynamicAny", new String[] { "AnySeqHelper", "DynAny", "DynAnyFactory", "DynAnyFactoryHelper", "DynAnyFactoryOperations", "DynAnyHelper", "DynAnyOperations", "DynAnySeqHelper", "DynArray", "DynArrayHelper", "DynArrayOperations", "DynEnum", "DynEnumHelper", "DynEnumOperations", "DynFixed", "DynFixedHelper", "DynFixedOperations", "DynSequence", "DynSequenceHelper", "DynSequenceOperations", "DynStruct", "DynStructHelper", "DynStructOperations", "DynUnion", "DynUnionHelper", "DynUnionOperations", "DynValue", "DynValueBox", "DynValueBoxOperations", "DynValueCommon", "DynValueCommonOperations", "DynValueHelper", "DynValueOperations", "FieldNameHelper", "NameDynAnyPair", "NameDynAnyPairHelper", "NameDynAnyPairSeqHelper", "NameValuePair", "NameValuePairHelper", "NameValuePairSeqHelper", "_DynAnyFactoryStub", "_DynAnyStub", "_DynArrayStub", "_DynEnumStub", "_DynFixedStub", "_DynSequenceStub", "_DynStructStub", "_DynUnionStub", "_DynValueStub" });
        packages.put("org.omg.DynamicAny.DynAnyFactoryPackage", new String[] { "InconsistentTypeCode", "InconsistentTypeCodeHelper" });
        packages.put("org.omg.DynamicAny.DynAnyPackage", new String[] { "InvalidValue", "InvalidValueHelper", "TypeMismatch", "TypeMismatchHelper" });
        packages.put("org.omg.IOP", new String[] { "Codec", "CodecFactory", "CodecFactoryHelper", "CodecFactoryOperations", "CodecOperations", "CodeSets", "ComponentIdHelper", "Encoding", "ENCODING_CDR_ENCAPS", "ExceptionDetailMessage", "IOR", "IORHelper", "IORHolder", "MultipleComponentProfileHelper", "MultipleComponentProfileHolder", "ProfileIdHelper", "RMICustomMaxStreamFormat", "ServiceContext", "ServiceContextHelper", "ServiceContextHolder", "ServiceContextListHelper", "ServiceContextListHolder", "ServiceIdHelper", "TaggedComponent", "TaggedComponentHelper", "TaggedComponentHolder", "TaggedProfile", "TaggedProfileHelper", "TaggedProfileHolder", "TAG_ALTERNATE_IIOP_ADDRESS", "TAG_CODE_SETS", "TAG_INTERNET_IOP", "TAG_JAVA_CODEBASE", "TAG_MULTIPLE_COMPONENTS", "TAG_ORB_TYPE", "TAG_POLICIES", "TAG_RMI_CUSTOM_MAX_STREAM_FORMAT", "TransactionService" });
        packages.put("org.omg.IOP.CodecFactoryPackage", new String[] { "UnknownEncoding", "UnknownEncodingHelper" });
        packages.put("org.omg.IOP.CodecPackage", new String[] { "FormatMismatch", "FormatMismatchHelper", "InvalidTypeForEncoding", "InvalidTypeForEncodingHelper", "TypeMismatch", "TypeMismatchHelper" });
        packages.put("org.omg.Messaging", new String[] { "SyncScopeHelper", "SYNC_WITH_TRANSPORT" });
        packages.put("org.omg.PortableInterceptor", new String[] { "ACTIVE", "AdapterManagerIdHelper", "AdapterNameHelper", "AdapterStateHelper", "ClientRequestInfo", "ClientRequestInfoOperations", "ClientRequestInterceptor", "ClientRequestInterceptorOperations", "Current", "CurrentHelper", "CurrentOperations", "DISCARDING", "ForwardRequest", "ForwardRequestHelper", "HOLDING", "INACTIVE", "Interceptor", "InterceptorOperations", "InvalidSlot", "InvalidSlotHelper", "IORInfo", "IORInfoOperations", "IORInterceptor", "IORInterceptorOperations", "IORInterceptor_3_0", "IORInterceptor_3_0Helper", "IORInterceptor_3_0Holder", "IORInterceptor_3_0Operations", "LOCATION_FORWARD", "NON_EXISTENT", "ObjectIdHelper", "ObjectReferenceFactory", "ObjectReferenceFactoryHelper", "ObjectReferenceFactoryHolder", "ObjectReferenceTemplate", "ObjectReferenceTemplateHelper", "ObjectReferenceTemplateHolder", "ObjectReferenceTemplateSeqHelper", "ObjectReferenceTemplateSeqHolder", "ORBIdHelper", "ORBInitializer", "ORBInitializerOperations", "ORBInitInfo", "ORBInitInfoOperations", "PolicyFactory", "PolicyFactoryOperations", "RequestInfo", "RequestInfoOperations", "ServerIdHelper", "ServerRequestInfo", "ServerRequestInfoOperations", "ServerRequestInterceptor", "ServerRequestInterceptorOperations", "SUCCESSFUL", "SYSTEM_EXCEPTION", "TRANSPORT_RETRY", "UNKNOWN", "USER_EXCEPTION" });
        packages.put("org.omg.PortableInterceptor.ORBInitInfoPackage", new String[] { "DuplicateName", "DuplicateNameHelper", "InvalidName", "InvalidNameHelper", "ObjectIdHelper" });
        packages.put("org.omg.PortableServer", new String[] { "AdapterActivator", "AdapterActivatorOperations", "Current", "CurrentHelper", "CurrentOperations", "DynamicImplementation", "ForwardRequest", "ForwardRequestHelper", "IdAssignmentPolicy", "IdAssignmentPolicyOperations", "IdAssignmentPolicyValue", "IdUniquenessPolicy", "IdUniquenessPolicyOperations", "IdUniquenessPolicyValue", "ID_ASSIGNMENT_POLICY_ID", "ID_UNIQUENESS_POLICY_ID", "ImplicitActivationPolicy", "ImplicitActivationPolicyOperations", "ImplicitActivationPolicyValue", "IMPLICIT_ACTIVATION_POLICY_ID", "LifespanPolicy", "LifespanPolicyOperations", "LifespanPolicyValue", "LIFESPAN_POLICY_ID", "POA", "POAHelper", "POAManager", "POAManagerOperations", "POAOperations", "RequestProcessingPolicy", "RequestProcessingPolicyOperations", "RequestProcessingPolicyValue", "REQUEST_PROCESSING_POLICY_ID", "Servant", "ServantActivator", "ServantActivatorHelper", "ServantActivatorOperations", "ServantActivatorPOA", "ServantLocator", "ServantLocatorHelper", "ServantLocatorOperations", "ServantLocatorPOA", "ServantManager", "ServantManagerOperations", "ServantRetentionPolicy", "ServantRetentionPolicyOperations", "ServantRetentionPolicyValue", "SERVANT_RETENTION_POLICY_ID", "ThreadPolicy", "ThreadPolicyOperations", "ThreadPolicyValue", "THREAD_POLICY_ID", "_ServantActivatorStub", "_ServantLocatorStub" });
        packages.put("org.omg.PortableServer.CurrentPackage", new String[] { "NoContext", "NoContextHelper" });
        packages.put("org.omg.PortableServer.POAManagerPackage", new String[] { "AdapterInactive", "AdapterInactiveHelper", "State" });
        packages.put("org.omg.PortableServer.POAPackage", new String[] { "AdapterAlreadyExists", "AdapterAlreadyExistsHelper", "AdapterNonExistent", "AdapterNonExistentHelper", "InvalidPolicy", "InvalidPolicyHelper", "NoServant", "NoServantHelper", "ObjectAlreadyActive", "ObjectAlreadyActiveHelper", "ObjectNotActive", "ObjectNotActiveHelper", "ServantAlreadyActive", "ServantAlreadyActiveHelper", "ServantNotActive", "ServantNotActiveHelper", "WrongAdapter", "WrongAdapterHelper", "WrongPolicy", "WrongPolicyHelper" });
        packages.put("org.omg.PortableServer.ServantLocatorPackage", new String[] { "CookieHolder" });
        packages.put("org.omg.PortableServer.portable", new String[] { "Delegate" });
        packages.put("org.omg.SendingContext", new String[] { "RunTime", "RunTimeOperations" });
        packages.put("org.omg.stub.java.rmi", new String[] { "_Remote_Stub" });
        packages.put("org.w3c.dom", new String[] { "Attr", "CDATASection", "CharacterData", "Comment", "Document", "DocumentFragment", "DocumentType", "DOMConfiguration", "DOMError", "DOMErrorHandler", "DOMException", "DOMImplementation", "DOMImplementationList", "DOMImplementationSource", "DOMLocator", "DOMStringList", "Element", "Entity", "EntityReference", "NamedNodeMap", "NameList", "Node", "NodeList", "Notation", "ProcessingInstruction", "Text", "TypeInfo", "UserDataHandler" });
        packages.put("org.w3c.dom.bootstrap", new String[] { "DOMImplementationRegistry" });
        packages.put("org.w3c.dom.css", new String[] { "Counter", "CSS2Properties", "CSSCharsetRule", "CSSFontFaceRule", "CSSImportRule", "CSSMediaRule", "CSSPageRule", "CSSPrimitiveValue", "CSSRule", "CSSRuleList", "CSSStyleDeclaration", "CSSStyleRule", "CSSStyleSheet", "CSSUnknownRule", "CSSValue", "CSSValueList", "DocumentCSS", "DOMImplementationCSS", "ElementCSSInlineStyle", "Rect", "RGBColor", "ViewCSS" });
        packages.put("org.w3c.dom.events", new String[] { "DocumentEvent", "Event", "EventException", "EventListener", "EventTarget", "MouseEvent", "MutationEvent", "UIEvent" });
        packages.put("org.w3c.dom.html", new String[] { "HTMLAnchorElement", "HTMLAppletElement", "HTMLAreaElement", "HTMLBaseElement", "HTMLBaseFontElement", "HTMLBodyElement", "HTMLBRElement", "HTMLButtonElement", "HTMLCollection", "HTMLDirectoryElement", "HTMLDivElement", "HTMLDListElement", "HTMLDocument", "HTMLDOMImplementation", "HTMLElement", "HTMLFieldSetElement", "HTMLFontElement", "HTMLFormElement", "HTMLFrameElement", "HTMLFrameSetElement", "HTMLHeadElement", "HTMLHeadingElement", "HTMLHRElement", "HTMLHtmlElement", "HTMLIFrameElement", "HTMLImageElement", "HTMLInputElement", "HTMLIsIndexElement", "HTMLLabelElement", "HTMLLegendElement", "HTMLLIElement", "HTMLLinkElement", "HTMLMapElement", "HTMLMenuElement", "HTMLMetaElement", "HTMLModElement", "HTMLObjectElement", "HTMLOListElement", "HTMLOptGroupElement", "HTMLOptionElement", "HTMLParagraphElement", "HTMLParamElement", "HTMLPreElement", "HTMLQuoteElement", "HTMLScriptElement", "HTMLSelectElement", "HTMLStyleElement", "HTMLTableCaptionElement", "HTMLTableCellElement", "HTMLTableColElement", "HTMLTableElement", "HTMLTableRowElement", "HTMLTableSectionElement", "HTMLTextAreaElement", "HTMLTitleElement", "HTMLUListElement" });
        packages.put("org.w3c.dom.ls", new String[] { "DOMImplementationLS", "LSException", "LSInput", "LSLoadEvent", "LSOutput", "LSParser", "LSParserFilter", "LSProgressEvent", "LSResourceResolver", "LSSerializer", "LSSerializerFilter" });
        packages.put("org.w3c.dom.ranges", new String[] { "DocumentRange", "Range", "RangeException" });
        packages.put("org.w3c.dom.stylesheets", new String[] { "DocumentStyle", "LinkStyle", "MediaList", "StyleSheet", "StyleSheetList" });
        packages.put("org.w3c.dom.traversal", new String[] { "DocumentTraversal", "NodeFilter", "NodeIterator", "TreeWalker" });
        packages.put("org.w3c.dom.views", new String[] { "AbstractView", "DocumentView" });
        packages.put("org.w3c.dom.xpath", new String[] { "XPathEvaluator", "XPathException", "XPathExpression", "XPathNamespace", "XPathNSResolver", "XPathResult" });
        packages.put("org.xml.sax", new String[] { "AttributeList", "Attributes", "ContentHandler", "DocumentHandler", "DTDHandler", "EntityResolver", "ErrorHandler", "HandlerBase", "InputSource", "Locator", "Parser", "SAXException", "SAXNotRecognizedException", "SAXNotSupportedException", "SAXParseException", "XMLFilter", "XMLReader" });
        packages.put("org.xml.sax.ext", new String[] { "Attributes2", "Attributes2Impl", "DeclHandler", "DefaultHandler2", "EntityResolver2", "LexicalHandler", "Locator2", "Locator2Impl" });
        packages.put("org.xml.sax.helpers", new String[] { "AttributeListImpl", "AttributesImpl", "DefaultHandler", "LocatorImpl", "NamespaceSupport", "ParserAdapter", "ParserFactory", "XMLFilterImpl", "XMLReaderAdapter", "XMLReaderFactory" });
        packages.put("sunw.io", new String[] { "Serializable" });
        packages.put("sunw.util", new String[] { "EventListener", "EventObject" });
    }

    public static void importPackageStar(QualifiedName qualifiedName, HashMap<String, Type> importedTypes, ArrayList<LexicalException> errors)
    {
        String packageName = Util.join(qualifiedName.elements, ".");
        String[] classNames = packages.get(packageName);
        if (classNames == null) {
            errors.add(LexicalException.cantResolveImport(qualifiedName));
            return;
        }
        try {
            for (String className : classNames)
                importedTypes.put(className, RuntimeType.getType(Class.forName(packageName + "." + className)));
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e); // this should never happen
        }
    }
}
