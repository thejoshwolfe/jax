
###
### Josh's Jax grammar definition file
###

## how the grammar works:
## types of grammar elements:
## 	scalar:
## 	 declaration prefixed with "$"
##   elements listed delimited by whitespace
##   indicates that all elements should appear in the order specified
##  list:
##   declaration prefixed with "~"
##   element type and delimiter token specified with a ":" between them
##   indicates that zero or more occurrences of the element appear separated by the delimiter
##   when the element type is surrounded in parens, it means elements between and around delimiters are optional (ex: {1,2,,3,}, {,,})
##  switch:
##   declaration prefixed with "|"
##   choices listed delimited by "|"
##   indicates that exactly one of the choices should appear
##  recursive prototype:
##   prototype definition prefixed with "/"
##   actual definition appears later and is one of scalar, list, or switch
##  special predefined elements:
##   begin with a "!"
##   there are only a few such as !Root. I hope what they do is self explanitory.
##
## declared element names must be all letters in TitleCase. /[A-Z][A-Za-z]*/ I recommend TitleCase because they will be the names of Java classes.
##
## all elements must be declared or prototyped before they are referenced in a definition.
## scalars with head- or tail-recursion must specify a precedence in parentheses following the reference to the prototyped element.
##
## primitive elements: 
##  LITERAL - indicates a literal value (42.0f, "hello", etc)
##  ID - indicates an identifier.
##
## literal elements:
##  elements specified in quotes (") signify keywords or symbol tokens
##
## special elements

### Types
|PrimitiveType = "void" | "boolean" | "byte" | "short" | "int" | "long" | "float" | "double" | "char"
|ScalarType = PrimitiveType | ID
|ArrayDimension = "[" "]"
~ArrayDimensions = ArrayDimension : ""
$TypeId = ScalarType ArrayDimensions

### variable declaration
$VariableDeclaration = TypeId ID

### recursive expressions
/Expression

    ### binary operators (precedence choices from http://java.sun.com/docs/books/tutorial/java/nutsandbolts/operators.html)
    $Addition = Expression(110) "+" Expression(111)
    $Subtraction = Expression(110) "-" Expression(111)
    $Multiplication = Expression(120) "*" Expression(121)
    $Division = Expression(120) "/" Expression(121)
    $PreIncrement = "++" Expression(131)
    $PreDecrement = "--" Expression(131)
    $PostIncrement = Expression(140) "++"
    $PostDecrement = Expression(140) "--"
    |Arithmetic = Addition | Subtraction | Multiplication | Division | PreIncrement | PreDecrement | PostIncrement | PostDecrement
    $LessThan = Expression(90) "<" Expression(90)
    $GreaterThan = Expression(90) ">" Expression(90)
    $LessThanOrEqual = Expression(90) "<=" Expression(90)
    $GreaterThanOrEqual = Expression(90) ">=" Expression(90)
    $Equality = Expression(80) "==" Expression(81)
    $Inequality = Expression(80) "!=" Expression(81)
    |Comparison = LessThan | GreaterThan | LessThanOrEqual | GreaterThanOrEqual | Equality | Inequality 
    $ShortCircuitAnd = Expression(40) "&&" Expression(41)
    $ShortCircuitOr = Expression(30) "&&" Expression(31)
    |ShortCircuit = ShortCircuitAnd | ShortCircuitOr
    |InfixOperation = -Arithmetic | -Comparison | -ShortCircuit

    ### unary prefix operators
    $Negation = "-" Expression(131)
    $BooleanNot = "!" Expression(131)
    |PrefixOperation = Negation

    |Operation = -InfixOperation | -PrefixOperation

    #### method invocation
    ~Arguments = Expression : ","
    $MethodInvocation = ID "(" Arguments ")"
    $ConstructorInvocation = "new" MethodInvocation
    $ConstructorRedirectThis = "this" "(" Arguments ")"
    $ConstructorRedirectSuper = "this" "(" Arguments ")"

    ### variable initialization
    $VariableCreation = VariableDeclaration "=" Expression
    $InferredVariableCreation = "var" ID "=" Expression


    ### Control Structures
    $IfThen = "if" Expression "then" Expression
    $IfThenElse = "if" Expression "then" Expression "else" Expression
    $ForLoop = "for" "(" Expression ";" Expression ";" Expression ")" Expression
    $WhileLoop = "while" "(" Expression ")" Expression
    |ControlStructure = IfThen | IfThenElse | ForLoop

    ### Control Statements
    $ReturnExpression = "return" Expression
    $ReturnVoid = "return"
    $Throw = "throw" Expression
    |ControlStatement = ReturnExpression | ReturnVoid | Throw

    ### grouping
    $Quantity = "(" Expression ")"
    ~BlockContents = (Expression) : ";"
    $Block = "{" BlockContents "}"

    ### special parsing constructs
    ### All casting is named TypeCast in the AST. PrimitiveCast and TypeIdCast are defined separately here to show how they are parsed differently.
    ### see:
    ###   http://thejoshwolfe.blogspot.com/2009/05/its-all-cs-fault.html 
    ###   http://thejoshwolfe.blogspot.com/2009/10/its-all-cs-fault-part-ii.html
    $PrimitiveCast = "(" PrimitiveType ")" Expression
    $TypeIdCast = "(" TypeId ")" ExpressionThatDoesNotStartWithPlusOrMinus(130)       # not a real element name
    |TypeCast = PrimitiveCast | TypeIdCast     # not actually a switch element. Just is one of the two options

    $Assignment = ID "=" Expression

    # dereferencing
    $DereferenceField = Expression(150) "." ID
    $DereferenceFieldAssignment = Expression(150) "." ID "=" Expression
    $DereferenceMethod = Expression(150) "." MethodInvocation
    $StaticDereferenceField = TypeId "." ID                       # These two are impossible to distinguish from the above two at the
    $StaticMethodInvocation = TypeId "." MethodInvocation     # Parsing stage. The Lexiconizer has to swap in these when appropriate.
    $ArrayDereference = Expression(150) "[" Expression "]"
    |Dereferencing = DereferenceField | DereferenceMethod | StaticDereferenceField | StaticMethodInvocation | ArrayDereference

    ### try-catch-finally
    $TryPart = "try" Expression
    $CatchBody = "(" VariableDeclaration ")" Expression
    ~CatchList = CatchBody : "catch"
    $CatchPart = "catch" CatchList
    $FinallyPart = "finally" Expression
    $TryCatch = TryPart CatchPart
    $TryFinally = TryPart FinallyPart
    $TryCatchFinally = TryPart CatchPart FinallyPart
    |TryGroup = TryCatch | TryFinally | TryCatchFinally

|Expression = LITERAL | MethodInvocation | ID | "null" | "this" | -Operation | Block | -ControlStucture | VariableCreation | VariableDeclaration | -Dereferencing | -TryGroup | ControlStatement

### fields
|FieldModifier = "public" | "private" | "protected" | "static" | "final" | "volatile" | "transient"
~FieldModifiers = FieldModifier : ""
$FieldDeclaration = FieldModifiers TypeId ID
$FieldCreation = FieldModifiers TypeId ID "=" Expression

### methods
~ArgumentDeclarations = VariableDeclaration : ","
$ConstructorDeclaration = ID "(" ArgumentDeclarations ")" Expression
$AbstractMethodDeclaration = TypeId ID "(" ArgumentDeclarations ")"
$MethodDeclaration = TypeId ID "(" ArgumentDeclarations ")" Expression

### Class
|ClassMember = MethodDeclaration | AbstractMethodDeclaration | FieldDeclaration | FieldCreation | ConstructorDeclaration
~ClassBody = (ClassMember) : ";"
|ClassModifier = "public" | "final"
~ClassModifiers = ClassModifier : ""
~InterfaceList = TypeId : ","
$ImplementsPart = "implements" InterfaceList
|MaybeImplements = ImplementsPart | ""
$ClassDeclaration = ClassModifiers "class" ID MaybeImplements "{" ClassBody "}"

### CompilationUnit
~QualifiedName = ID : "."
$PackageStatement = "package" QualifiedName ";"
~PackageStatements = PackageStatement : ""    # we really only want 0 or 1
$ImportClass = "import" QualifiedName "." "*" ";"
$ImportStar = "import" QualifiedName ";"
|ImportStatement = ImportStar | ImportClass
~Imports = ImportStatement : ""
$CompilationUnit = PackageStatements Imports ClassDeclaration

!Root = CompilationUnit

