This is a roadmap/todo.

Version 1.0:

- restore exception handling functionality. there are problems with our .class files (says javac).
- use local variables to preserve the operand stack when entering/exiting try-catch blocks.

- understand classfile format version number

- fields
- static and non-static initializers

- array store

- loops with else's

- continue/break/return

- non static members

- access modifiers

- final fields/methods/classes

- interfaces
- abstract classes/methods

- class literals (ex: String.class)

- line + column lookup in all compile errors

- debug info

- array initializers (new int[] { 1, 2 })

- do-while loops

- finally

- synchronized

- throw

- detect ambiguous overload resolution

- ? :




Version 1.1:

- referencing other .jax files

- proper String contatentation (using StringBuilder)

- compile-time constant reduction (ex: "a=1+1" => "a=2")

- static final field (constant) inlining


Version 2.0:

- local and anonymous types
- closure-like final variable thing with the above

- generic types

- automatic boxing/unboxing

- enums

- Variadic functions

- for each loops




Version 3.0:

- Java compatibility mode:
    - Semicolon insertion after "}"
    - Semicolon removal inside if-else and do-while
    - Abridged array initializers (int[] a = { 1, 2 })

