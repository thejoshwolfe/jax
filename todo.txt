This is a roadmap/todo.

Version 1.0:

broken:
    use local variables to preserve the operand stack when entering/exiting try-catch blocks.
    detect ambiguous overload resolution (is this really a problem)

ast:
    field declarations
    static and non-static initializers
    array store
    loops with else's
    continue/break/return
    non static members
    access modifiers
    final fields/methods/classes
    interfaces
    abstract classes/methods
    class literals (ex: String.class)
    array initializers (new int[] { 1, 2 })
    do-while loops
    finally
    synchronized
    throw
    ? :

staticalysis:
    uninitialized variable access
    unreachable code
    checked exceptions

misc:
    line + column lookup in all compile errors
    debug info



Version 1.1:

semalysis:
    proper String contatentation (using StringBuilder)
staticalysis:
    compile-time constant reduction (ex: "a=1+1" => "a=2")
    static final field (constant) inlining
misc:
    referencing other .jax files




Version 2.0:

ast:
    local and anonymous types
    enums
    variadic functions
    for each loops

semalysis:
    closure-like final variable thing with the above
    generic types
    automatic boxing/unboxing




Version 3.0:

Java compatibility mode:
    Semicolon insertion after "}"
    Semicolon removal inside if-else and do-while
    Abridged array initializers (int[] a = { 1, 2 })

